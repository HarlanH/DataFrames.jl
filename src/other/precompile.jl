# precompile.jl contains precompilation directives for all methods whose compilation
# is triggered by running DataFrames tests and takes more than a given threshold
# For all=true, the threshold is 0.01, for all=false it is 0.2.
# `precompile` calls are generated using SnoopCompile via:
# using SnoopCompileCore
# inf_timing = @snoopi tmin=0.01 include("test/runtests.jl")
# using SnoopCompile
# pc = SnoopCompile.parcel(inf_timing)
# SnoopCompile.write("src/other/precompile_tmp.jl", pc[:DataFrames], always=true)
function precompile(all=false)
    if !all
        ccall(:jl_generating_output, Cint, ()) == 1 || return nothing

        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Bool,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
            if !ismissing(fbody)
                Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Bool,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
            end
        end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Base.RefValue{NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}},Union{Function, Type},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,DataFrame,Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Float64},1}}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{String,1}})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
            if !ismissing(fbody)
                Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
            end
        end
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
            let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Any,N} where N,))) catch missing end
                    if !ismissing(fbody)
                        Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Any,N} where N,))
                    end
                end
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,AsTable,typeof(sum)})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.show)),NamedTuple{(:allcols, :rowlabel, :eltypes, :truncate),Tuple{Bool,Symbol,Bool,Int64}},typeof(show),Base.PipeEndpoint,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},All{Tuple{}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},All{Tuple{}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(show),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),String}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{Any,1},Pair{ByRow{typeof(rand)},Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Char,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.make_unique)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(DataFrames.make_unique),Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NamedTuple{(),Tuple{}}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{Int64,1}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Int64,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Int64,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Tuple{Symbol,Symbol},typeof(identity)}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol}})
        Base.precompile(Tuple{typeof(stack),DataFrame})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Symbol,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Symbol,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataAPI.levels),DataFrames.RepeatedVector{CategoricalArrays.CategoricalValue{String,UInt32}}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{String,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Base.ReshapedArray{Int64,2,Base.OneTo{Int64},Tuple{}}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,BigFloat,Union{Function, Type},Tuple{Array{BigFloat,1}}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Colon})
        Base.precompile(Tuple{typeof(repeat),DataFrame,Int64})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Int64,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},InvertedIndex{Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},InvertedIndex{Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(==),DataFrames.StackedVector{Union{Missing, Int64}},DataFrames.StackedVector{Union{Missing, Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Complex{Float64}},1}}})
        Base.precompile(Tuple{typeof(groupby),DataFrame,Symbol})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Between{Symbol,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Between{Symbol,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(floor),Tuple{Base.RefValue{Type{Int64}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,Tuple{Int64}}}}}})
        Base.precompile(Tuple{typeof(unstack),DataFrame,Symbol,Symbol})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Colon,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Colon,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(describe),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NamedTuple{(:x,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/plain")},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Union{Missing, Array{Float64,2}},1}}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :keepkeys, :ungroup, :renamecols),NTuple{4,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Pair{Symbol,typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Int64,1},InvertedIndex{Array{Int64,1}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Int64,1},InvertedIndex{Array{Int64,1}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Rational{Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(last),Symbol}}})
        Base.precompile(Tuple{typeof(permutedims),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Array{Float64,2}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{UInt64},Colon})
        Base.precompile(Tuple{typeof(isapprox),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(==),DataFrames.StackedVector{Float64},DataFrames.StackedVector{Float64}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.var)}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Base.OneTo{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,String,Union{Function, Type},Tuple{Array{String,1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{typeof(stack),DataFrame,Array{Any,1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{String,1},typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Char,1,UInt32,Char,CategoricalArrays.CategoricalValue{Char,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
    else
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :Mass, :Color),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:second, :first),Tuple{String,Int64}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Int64,1},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(hcat),DataFrame})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :ID2, :x_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1,),Tuple{Bool}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Array{Int64,1},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:a, :b),Tuple{Int64,Int64}},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:res,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},DataFrames.GroupKeys{GroupedDataFrame{DataFrame}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Int64,1},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :ID2, :x),Tuple{Array{Int64,1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(isequal),Array{Pair{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}},1},Array{Pair{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1},Array{String,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Complex{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Symbol,Int64},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{typeof(nrow),Symbol},1}})
        Base.precompile(Tuple{Type{DataFrame},Base.ReshapedArray{Float64,2,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Tuple{}},Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,Symbol},1}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.add_sum),Function,typeof(/),Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Complex{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :variable, :value),Tuple{UnitRange{Int64},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Number,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce),Function,Function,Nothing,Nothing,Bool,Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :C, :D, :E, :F),NTuple{5,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Array{Symbol,1}}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:k, :l),Tuple{Array{Int64,1},Array{Int64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Symbol,Symbol,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.mul_prod),Function,Nothing,Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Number},1}}})
        Base.precompile(Tuple{typeof(Base.to_index),GroupedDataFrame{DataFrame},NamedTuple{(:a,),Tuple{Missing}}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3),Tuple{Array{Char,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :a_b, :a_b_etc),Tuple{UnitRange{Int64},StepRange{Int64,Int64},StepRange{Int64,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Complex{Float64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Float64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{ByRow{typeof(identity)},NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:p, :q),Tuple{StepRange{Char,Int64},StepRange{Char,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(),Tuple{}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Tuple{Int64,Int64},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Complex{Float64},Union{Function, Type},Tuple{Array{Union{Missing, Complex{Float64}},1}}})
        Base.precompile(Tuple{typeof(Tables.namedtupleiterator),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Array{Symbol,1},typeof(identity)},Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :bin),Tuple{Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{Symbol,1},typeof(+)}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Symbol,1},Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(Base.literal_pow),Tuple{Base.RefValue{typeof(^)},DataFrame,Base.RefValue{Val{2}}}}})
        isdefined(DataFrames, Symbol("#134#135")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#134#135")),Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,UnitRange{Int64},Union{Function, Type},Tuple{Array{UnitRange{Int64},1}}})
        Base.precompile(Tuple{Type{DataFrame},Array{CategoricalArrays.CategoricalArray{T,1,UInt32,V,C,Union{}} where C where V where T,1},Symbol})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{Symbol,1},typeof(-)}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Array{String,1}})
        Base.precompile(Tuple{typeof(filter!),Pair{Array{Symbol,1},typeof(==)},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._gen_colnames),Any,Type{AsTable}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Float64,2}}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},InvertedIndex{InvertedIndex{Int64}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Number},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :Mass),Tuple{Array{String,1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,InvertedIndex{Colon}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}},Array{Int64,2}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:d1,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1, :x2),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},String})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C, :D),NTuple{4,Int64}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Int64,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Int64,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Float64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(dropmissing!),DataFrame,Array{Bool,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Nothing,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},StepRange{Char,Int64},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{String,1},typeof(identity)}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:b, :a),Tuple{Int64,Symbol}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{UnitRange{Int64},typeof(+)}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Symbol,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{String,1}},Tuple{Array{Int64,1},Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Base.RefValue{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}},Type{Ref},GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{String,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._add_col_check_copy),DataFrame,DataFrame,Int64,Bool,Any,Symbol,CategoricalArrays.CategoricalArray{Bool,1,UInt8,Bool,CategoricalArrays.CategoricalValue{Bool,UInt8},Union{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, DataFrame},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :b_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Float64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :x_first),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.compute_indices),Array{Int64,1},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:function, :x1_length),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Symbol,Symbol,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{DataFrame,1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{Int64,1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Rational{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}},Array{Float64,2}})
        Base.precompile(Tuple{Type{DataFrame},Array{UnitRange,1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.DataFrame!)),NamedTuple{(:x, :y, :copycols),Tuple{Array{Int64,1},Array{Int64,1},Bool}},typeof(DataFrame!)})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Symbol},1},Array{Symbol,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(hash),DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{NamedTuple{(:a, :b),Tuple{Symbol,Int64}}, Tuple{Symbol,Int64}},1}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Float64,1},Array{Union{Missing, Number},1}})
        Base.precompile(Tuple{typeof(unique),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:_right,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,Base.RefValue{Float64},Union{Function, Type},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(view),DataFrame,typeof(!),All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Any,1},Symbol,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Any,1},Symbol,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,typeof(first)},1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Symbol,1}},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :g, :y),Tuple{Array{Any,1},Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{BigInt,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :b, :d, :a, :e),Tuple{Array{String,1},Array{Float64,1},Array{Bool,1},Array{Char,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:z,),Tuple{Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{Type{DataFrame},Dict{Symbol,UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Array{Symbol,1},typeof(-)}})
        Base.precompile(Tuple{Type{DataFrame},Array{Union{Missing, Float64},2}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Bool},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Nothing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :a, :b),Tuple{Array{Int64,1},Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Char,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Union{Missing, Number},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :id),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Array{Float64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :id2_1),NTuple{4,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{Int64},Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y, :x, :z),Tuple{UnitRange{Int64},UnitRange{Int64},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{Union{Missing, String},1}},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Rational{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{4,SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,Regex,Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(view),DataFrame,Array{Union{Missing, UInt64},1},Colon})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Pair{_A,typeof(sum)} where _A,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:_left, :_leftX),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:z,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y, :x),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{Array{Float64,1},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:first, :second),Tuple{Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Complex{Float64}}},Tuple{Array{Complex{Float64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(transform),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Pair{Symbol,typeof(first)}})
        Base.precompile(Tuple{typeof(names),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},All{Tuple{}}})
        let fbody = try __lookup_kwbody__(which(sortperm, (SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:c_identity,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(+),Tuple{Tuple{Int64,Int64},Int64}},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Int64,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:v1, :v2),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{NamedTuple{(:a, :b),Tuple{Symbol,Int64}}, DataFrames.GroupKey{GroupedDataFrame{DataFrame}}},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(select),DataFrame,Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Between{Symbol,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{String,String}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Symbol,1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{AsTable,ByRow{typeof(first)}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.std),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1_first, :x2_first, :x3_first, :x4_first, :x1),Tuple{Int64,Int64,Missing,Missing,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol}})
        Base.precompile(Tuple{typeof(rename),Function,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Irrational{:Ï€},1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Nothing}},Tuple{Array{Nothing,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{Symbol,Bool}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Between{Symbol,Symbol}})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(transform),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C, :D, :E),NTuple{5,UnitRange{Int64}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{String,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{String,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1, :x2),Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{true},Nothing})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform!, (GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(first),Symbol}},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(transform!),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(first),Symbol}},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :id2, :x),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(copyto!),Array{String,1},DataFrames.RepeatedVector{String}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.insertcols!)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(insertcols!),DataFrame,Int64,Pair{String,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_callable),Union{Function, Type},Bool,DataFrame,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :Job),Tuple{Array{Int64,1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:z,),Tuple{Int64}},Tuple{Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Val{false},Nothing})
        Base.precompile(Tuple{ByRow{typeof(first)},NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{true},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,SubArray{Int64,0,Array{Int64,1},Tuple{Int64},true},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:_right, :_rightX),Tuple{Int64,String}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{String}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Rational{Int64},1},Array{Number,1}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Tuple{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{String,String}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),Type{Ref},Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{9,DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{CategoricalArrays.CategoricalValue{Int64,UInt32}}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Symbol,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(append!),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.append_rows!),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Bool,1}},Int64,Tuple{Symbol}})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(transform),GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(repeat),DataFrame,Int64})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Int64,UInt8,1,Array{UInt8,1}},Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/latex")},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(transform),DataFrame,Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Array{Int64,1},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,typeof(last)},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y, :x),Tuple{UnitRange{Int64},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/csv")},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol},Pair{Symbol,ByRow{typeof(sin)}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames._vcat)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(DataFrames._vcat),Array{SubDataFrame{DataFrame,S,UnitRange{Int64}} where S<:DataFrames.AbstractIndex,1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Float64,1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(transform),DataFrame,Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Regex})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(getindex),Tuple{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Any,1},Array{Int64,1}},Tuple{Array{Any,1},Array{Int64,1}}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Array{NamedTuple{(),Tuple{}},1}}})
        Base.precompile(Tuple{typeof(DataFrames._add_col_check_copy),DataFrame,DataFrame,Int64,Bool,Any,Symbol,CategoricalArrays.CategoricalArray{Bool,1,UInt32,Bool,CategoricalArrays.CategoricalValue{Bool,UInt32},Union{}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Base.ReshapedArray{Int64,2,Base.OneTo{Int64},Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Any,1},Array{Any,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a,),Tuple{Array{Union{Missing, Function},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},StepRange{Char,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),DataFrames.StackedVector{Union{Missing, Float64}},DataFrames.StackedVector{Union{Missing, Float64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :keepkeys, :ungroup, :renamecols),NTuple{4,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Function,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:c_sum,),Tuple{Int64}},1}}},Tuple{Array{NamedTuple{(:c_sum,),Tuple{Int64}},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:c_sum,),Tuple{Int64}},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Tuple{Int64,Int64}}},Tuple{Array{Tuple{Int64,Int64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, String},1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Type{T} where T,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(floor),Tuple{DataFrame}}})
        Base.precompile(Tuple{typeof(groupby),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{NamedTuple{(:g,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}}},Tuple{Array{NamedTuple{(:g,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},1}},Int64,Int64,Type{Ref},GroupedDataFrame{DataFrame},NamedTuple{(:g,),Tuple{Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{Any,1},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}},Array{Float64,2}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Regex}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :c),Tuple{Array{Float64,1},Array{Float64,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Symbol,Array{Symbol,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},0,Array{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},1},Tuple{Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Symbol,Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:p, :q),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{DataFrameRow{DataFrame,DataFrames.Index},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x1, :x2),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{typeof(nrow),1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a_function, :x1, :x2, :p, :q, :s, :t, :k, :l, :z),Tuple{Array{Array{Int64,1},1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{NamedTuple{(:s, :t),Tuple{Int64,Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(minimum),Symbol}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Union{Missing, Integer},1},Colon})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Function,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},String})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :x1_function),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64}},SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,UnionAll}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x3, :x1, :x2),Tuple{Array{Float64,1},Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Int64,typeof(sum)})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        Base.precompile(Tuple{ByRow{typeof(minmax)},Array{Float64,1},Vararg{Array{Float64,1},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :renamecols),Tuple{Array{Any,1},Pair{String,String}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{String,Union{Missing, Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Array{String,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrame,Union{Function, Type},Tuple{Array{DataFrame,1}}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :e),Tuple{Array{Int64,1},Array{Int64,1},Array{Float64,1},Array{Float64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :a_b),Tuple{UnitRange{Int64},StepRange{Int64,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Union{Missing, String},1},1},Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:keepkeys,),Tuple{Bool}},typeof(select),GroupedDataFrame{DataFrame},Regex})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}},Int64})
        Base.precompile(Tuple{Type{DataFrames.SubIndex},DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Cols{Tuple{Colon}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, UnitRange{Int64}},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,Array{Bool,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Irrational{:Ï€}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,SubArray{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},0,Array{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},1},Tuple{Int64},true},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(transform),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Any})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Any,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(min),Nothing,Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},DataFrame}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Array{Symbol,1},Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y,),Tuple{String}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,Symbol},1}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:z,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(unique),DataFrame,InvertedIndex{Array{Symbol,1}}})
        isdefined(DataFrames, Symbol("#444#446")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#444#446")),Array{Char,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),DataFrame,Symbol,Pair{Symbol,Symbol},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{UnitRange{Int64},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Union{Function, Type},Tuple{Array{Union{Missing, UnitRange{Int64}},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Symbol})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Irrational{:Ï€}, Missing},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Regex,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Regex,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},DataFrame,DataFrames.RowGroupDict{DataFrame},Bool,Bool,Bool,Bool})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Symbol,Array{T,1} where T},1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:x,),Tuple{Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Int64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Array{Union{Missing, Int64},1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(unique),DataFrame,UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :b, :d, :a, :e),NTuple{5,Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Real,1}}})
        Base.precompile(Tuple{typeof(==),DataFrames.RepeatedVector{Int64},DataFrames.RepeatedVector{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:y, :z),Tuple{Array{Float64,1},Int64}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Name, :Mass),Tuple{Array{Union{Missing, String},1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Any,1},Array{Int64,1}},Tuple{Array{Any,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.show)),NamedTuple{(:allrows, :allcols, :rowlabel, :summary, :eltypes, :truncate),Tuple{Bool,Bool,Symbol,Bool,Bool,Int64}},typeof(show),Base.PipeEndpoint,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :keepkeys, :ungroup, :renamecols),NTuple{4,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Pair{Symbol,typeof(sum)},Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_left_1),NTuple{4,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{Array{T,2} where T},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Tuple{UnitRange{Int64},UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :a, :b),Tuple{Array{Int64,1},Array{Float64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Dict{Symbol,Int64},1}}},Tuple{Array{Dict{Symbol,Int64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :g),Tuple{UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Symbol},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,String,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),DataFrame,Symbol,Pair{Symbol,typeof(first)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :b, :d, :a),NTuple{4,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Tuple{Int64,Int64},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Type{Array{T,1} where T},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,String,Pair{String,String},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,UnitRange{Int64},Colon,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat!)),NamedTuple{(:makeunique, :copycols),Tuple{Bool,Bool}},typeof(DataFrames.hcat!),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_y_function),Tuple{Array{Int64,1},Array{DataFrameRow{DataFrame,DataFrames.Index},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(select),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Base.OneTo{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},Bool,Bool,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :x),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Union{Missing, Int64},1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:c,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{String,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Between{Symbol,Symbol}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Complex{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{String,Any}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Union{Missing, Float64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a_b_c_identity,),Tuple{Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Int64,Union{Function, Type},Tuple{Array{Int64,1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Int64,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Array{Float64,3}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :x1),Tuple{Array{Int64,1},Array{Char,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Tables.MatrixTable{Array{Any,2}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.manipulate, (DataFrame,Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(DataFrames.manipulate),DataFrame,Array{Any,1},))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.vcat)),NamedTuple{(:cols,),Tuple{Array{Symbol,1}}},typeof(vcat),DataFrame,Vararg{DataFrame,N} where N})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{UnitRange{Int64},ByRow{typeof(+)}}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Type{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Missing,1},Array{Union{Missing, Real},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Real,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:variable, :mean, :std, :min, :q25, :median, :q75, :max, :nunique, :nmissing, :first, :last, :eltype),Tuple{Array{Symbol,1},Array{Union{Nothing, Float64},1},Array{Union{Nothing, Float64},1},Array{Any,1},Array{Union{Nothing, Float64},1},Array{Union{Nothing, Float64},1},Array{Union{Nothing, Float64},1},Array{Any,1},Array{Union{Nothing, Int64},1},Array{Int64,1},Array{Any,1},Array{Any,1},Array{Type,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Int64,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Missing}},Tuple{Array{Union{Missing, Float64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:y, :z),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Float64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{String,typeof(identity)}})
        Base.precompile(Tuple{Type{DataFrame},Pair{String,Int64},Vararg{Pair{String,Int64},N} where N})
        Base.precompile(Tuple{ByRow{typeof(identity)},NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Bool},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:a, :b),Tuple{Int64,Missing}},Tuple{Array{Int64,1},Array{Missing,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce),Function,Function,Nothing,Nothing,Bool,Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Int64}},Tuple{Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64, Int8},1}},Tuple{Symbol},Val{false}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select!, (DataFrame,Any,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,typeof(select!),DataFrame,Any,))
                end
            end
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},DataFrames.RepeatedVector{Int64}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Array{Float64,2},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}},Array{Float64,2}}},Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Float64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Tuple{Int64},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:sum, :n, :mean),Tuple{Array{Int64,1},Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Dict{Any,Int64},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(unique),DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1}}},Tuple{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,Symbol},1}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:col,),Tuple{Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Any,Int64},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:keepkeys, :ungroup),Tuple{Bool,Bool}},typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Int64, Int8},1}}})
        Base.precompile(Tuple{typeof(transform),Function,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Real,2},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper),DataFrame,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,Bool})
        Base.precompile(Tuple{Type{DataFrame},Array{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},1},Array{Symbol,1}})
        isdefined(DataFrames, Symbol("#134#135")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#134#135")),SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:y,),Tuple{Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{StepRange{Char,Int64},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :newcol, :newcol_1),NTuple{5,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Int64,Symbol}})
        Base.precompile(Tuple{typeof(map),Function,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :a_1, :a_2),Tuple{UnitRange{Int64},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),String}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,2},Colon,All{Tuple{}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(length),Symbol}},Pair{Int64,Pair{typeof(length),Symbol}},Vararg{Pair{Int64,Pair{typeof(length),Symbol}},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a_b_c_function,),Tuple{Array{Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,Symbol},1}}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :y),Tuple{Int64,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(unique),DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{Int64,2},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Base.RefValue{Float64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_var_skipmissing),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Symbol,Array{Int64,1}},1}})
        Base.precompile(Tuple{Type{DataFrame},Array{UnitRange{Int64},1},Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Int64,Array{Any,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#136#137")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#136#137")),SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Tuple{Any},1}})
        Base.precompile(Tuple{ByRow{typeof(identity)},NamedTuple{(:x, :y),Tuple{UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(semijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Float64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(hcat),DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Array{Int64,2}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Int64, Int8},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name),Tuple{Array{Float64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),DataFrames.RepeatedVector{Union{Missing, String}},DataFrames.RepeatedVector{Union{Missing, String}}})
        Base.precompile(Tuple{typeof(unique),DataFrame,InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Number,1}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Int64,1},Colon,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Function,GroupedDataFrame{DataFrame},Tuple{},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Tuple{Int64,Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),DataFrame,Function,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Colon})
        Base.precompile(Tuple{typeof(<),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Array{Symbol,1},Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},SubArray{Float64,1,Array{Float64,1},Tuple{Base.Slice{Base.OneTo{Int64}}},true}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrames.DataFrameColumns{DataFrame},Base.RefValue{UnionAll}})
        Base.precompile(Tuple{Type{DataFrame},Array{NamedTuple{(:a, :b),Tuple{Union{Missing, Int64},Any}},1}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Char,1},Array{Char,1},Array{Char,1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Base.RefValue{NamedTuple{(:g,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}},Union{Function, Type},NamedTuple{(:g,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{Type{DataFrame},Dict{String,Int64}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Between{Int64,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:second, :first),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Tuple{Array{Any,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Base.RefValue{Int64},Array{Int64,0},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :A_1, :B_1, :A_2, :B_2),Tuple{Array{Char,1},UnitRange{Int64},Char,UnitRange{Int64},Char,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Char,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.collect_similar),DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Base.Generator{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Type{NamedTuple}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Tuple{Int64},1},Union{Function, Type},NamedTuple{(:x,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:first, :second),Tuple{Array{String,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),ByRow{typeof(/)},Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :x1),Tuple{UnitRange{Int64},Array{Bool,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:b_sum, :c_sum),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Dict{Symbol,Int64},1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,InvertedIndex{Int64},Cols{Tuple{Colon}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :z),Tuple{Array{Int64,1},UnitRange{Int64},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataAPI.levels),DataFrames.RepeatedVector{CategoricalArrays.CategoricalValue{String,UInt32}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x3, :x2, :x4),Tuple{Array{Float64,1},Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1, :x2),Tuple{Array{Int64,1},Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(rename!),DataFrame,Dict{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Array{Float64,2}},1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, Symbol},1,Array{Union{Missing, Symbol},1},Tuple{Base.OneTo{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:variable, :min, :min2, :max2, :max),Tuple{Symbol,Int64,Int64,Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :sid),Tuple{UnitRange{Int64},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Array{Int64,1}},false}}},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{Array{Float64,2},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (DataFrame,Any,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(select),DataFrame,Any,))
                end
            end
        Base.precompile(Tuple{typeof(map),Function,DataFrames.DataFrameRows{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(sin),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},DataFrame}}}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Rational{Int64}},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Int64,1},InvertedIndex{Array{Int64,1}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Int64,1},InvertedIndex{Array{Int64,1}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Tuple{Int64,String},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing},1},Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Pair{Symbol,typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Int64,Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Irrational{:Ï€},Union{Function, Type},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}}})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a,),Tuple{Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1, :x2),Tuple{Array{Int64,1},Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{Symbol,1},Pair{typeof(+),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,InvertedIndex{InvertedIndex{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(vcat),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),DataFrameRow{DataFrame,DataFrames.Index},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(==),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,DataFrame}}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1}},Val{true}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,typeof(sum)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:xmax,),Tuple{Float64}},Tuple{Array{Float64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :v1),Tuple{Array{String,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x1, :x2, :x3),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Float64,1},Colon,Int64})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Char,1},Array{Char,1},Array{Char,1}},Tuple{Array{Char,1},Array{Char,1},Array{Char,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{Tuple{Int64,Int64,Int64},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._add_col_check_copy),DataFrame,DataFrame,Int64,Bool,Any,Symbol,Array{DataFrameRow{DataFrame,DataFrames.Index},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrame,Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(==),Tuple{DataFrame,Base.RefValue{Nothing}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :id2, :x, :y),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_var),Tuple{UnitRange{Int64},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Between{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{InvertedIndex{Regex},Regex}}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:k, :l),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},Array{Int64,1}}},DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{Tuple},Tuple{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :SID),Tuple{UnitRange{Int64},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Float64,1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x1, :x2),Tuple{Array{Int64,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{BigFloat,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Any,1},Array{Int64,1}},Tuple{Array{Any,1},Array{Int64,1}}})
        Base.precompile(Tuple{ByRow{typeof(+)},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Vararg{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},N} where N})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Irrational{:Ï€},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Tuple{Float64,Float64},1}}},Tuple{Array{Tuple{Float64,Float64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},NTuple{4,Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,NTuple{4,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(==),DataFrames.StackedVector{Float64},DataFrames.StackedVector{Float64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{UnitRange{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :c),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(delete!),DataFrame,InvertedIndex{InvertedIndices.TupleVector{Tuple{Int64,Int64}}}})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:y,),Tuple{Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},BitArray{1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Any,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :Key, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},typeof(!),Cols{Tuple{Colon}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :g_function),Tuple{Array{Int64,1},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair),Pair,Bool,DataFrame,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,typeof(!),InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Float64,1},Array{Union{Nothing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :x_1),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x1_first, :x2_first, :x3_first, :x4_first),Tuple{Array{Int64,1},Int64,Int64,Missing,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :indicator),Tuple{Symbol,Symbol}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Tuple{UnitRange{Int64},Array{Int64,1}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{AsTable,UnionAll}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :a, :b),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Complex{Float64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Function,Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:b,),Tuple{Array{Int64,1}}},DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},InvertedIndex{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.insertcols!)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Int64}})
        Base.precompile(Tuple{Type{DataFrame},DataFrames.DataFrameRows{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a,),Tuple{Float64}}})
        Base.precompile(Tuple{typeof(transform),GroupedDataFrame{DataFrame},Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),DataFrameRow{DataFrame,DataFrames.Index},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:a, :b),Tuple{Int64,String}},Tuple{Array{Int64,1},Array{String,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, BigFloat},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{AbstractArray{T,1} where T,1},Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Array{Any,1}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :g_Ref),Tuple{Array{Int64,1},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(permutedims),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Int64, Int8},1}}})
        Base.precompile(Tuple{typeof(hcat),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,1},DataFrame})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:p, :q),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Float64,1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Missing,Int64}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,Int64,Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{DataFrame,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{String,1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(Base.setindex_widen_up_to),Array{DataFrames.RepeatedVector{Union{Missing, Int64}},1},DataFrames.RepeatedVector{Union{Missing, Float64}},Int64})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(unique),DataFrame,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Irrational{:Ï€}}},Tuple{Array{Irrational{:Ï€},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Irrational{:Ï€},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g,),Tuple{Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{ByRow{typeof(/)},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Vararg{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},N} where N})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{NamedTuple{(:a, :b),Tuple{Symbol,Int64}},1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum_skipmissing),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{String,1}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{BigFloat}},Function,GroupedDataFrame{DataFrame},Tuple{Array{BigInt,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Type{T} where T,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,Tuple{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Val{true},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:y, :z),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b2, :v2),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Symbol},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(sum),Tuple{DataFrames.DataFrameRows{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{Bool,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right, :ind),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{String,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Symbol,1},Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Symbol,1},Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Dict{Symbol,Symbol},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:c,),Tuple{Array{Float64,1}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :a, :b, :c, :d),Tuple{UnitRange{Int64},Array{Int64,1},Array{Int64,1},Array{Float64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :copycols),Tuple{Array{Int64,1},Array{Int64,1},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{String}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Float64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(Base.vect),DataFrame,Vararg{DataFrame,N} where N})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Missing,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :x_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Int64,Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{8,DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_sum, :g),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{DataFrameRow{DataFrame,DataFrames.Index},1},Union{Function, Type},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{Int64,1},Function})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},InvertedIndex{Symbol},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(outerjoin),DataFrame,DataFrame})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Array{Int64,1},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(sort),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Symbol})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,ByRow{typeof(identity)}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(repr),MIME{Symbol("text/latex")},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:keepkeys,),Tuple{Bool}},typeof(combine),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Symbol,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{String}},Function,GroupedDataFrame{DataFrame},Tuple{Array{String,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(promote_type),Type{DataFrames.DataFrameColumns{DataFrame}},Type{Union{Missing, Nothing, GroupedDataFrame{DataFrame}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(unstack),DataFrame,String,String,String})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:a, :b),Tuple{Int64,Int64}},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(unique),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{Type{DataFrame},Array{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Float64,1},Array{Real,1}})
        Base.precompile(Tuple{typeof(names),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Cols{Tuple{String}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select!)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(select!),GroupedDataFrame{DataFrame},Symbol})
        Base.precompile(Tuple{typeof(filter),Pair{Array{Symbol,1},typeof(==)},DataFrame})
        Base.precompile(Tuple{Type{Tuple},Array{DataFrame,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{String,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{String,typeof(identity)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Array{String,1}}},typeof(reduce),typeof(vcat),Tuple{DataFrame,DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Union{Missing, Array{Float64,2}},1}}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Pair{Int64,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:xmax,),Tuple{Float64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Number},1}}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},DataFrames.StackedVector{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{Float64,1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(==),DataFrames.RepeatedVector{String},DataFrames.RepeatedVector{String}})
        let fbody = try __lookup_kwbody__(which(sortperm, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,AsTable,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{String,1}}},Tuple{Array{String,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{String,1},typeof(!),Symbol})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64},1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:y,),Tuple{Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, UnitRange{Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(select),DataFrame,Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Dict{Symbol,Union{Missing, Int64}},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{Dict},Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
        Base.precompile(Tuple{ByRow{typeof(/)},Array{Float64,1},Vararg{Array{Float64,1},N} where N})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(identity),Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Missing, Int64},UInt8,1,Array{UInt8,1}},Tuple{Bool},Tuple{Int64}}}},CartesianIndex{2}})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Int64,1},Array{Int64,1}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Array{Any,1}},Vararg{Pair{Symbol,Array{Any,1}},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1},Array{Union{Missing, String},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames.ourshow),Base.GenericIOBuffer{Array{UInt8,1}},Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames.repeat_lengths!),Array{Int64,1},Array{Int64,1},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,Int64,Union{Function, Type},NTuple{4,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Array{Symbol,1},typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Tuple{Array{Any,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Array{Pair{String,String},1}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:x1, :x2),Tuple{Array{Int64,1},Array{Int64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1},Array{String,1}},Tuple{Array{Int64,1},Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Rational{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Int64,Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Pair{Symbol,Base.RefValue{Int64}},Pair{Symbol,Array{Int64,0}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Int64})
        Base.precompile(Tuple{typeof(names),GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}}},InvertedIndex{Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Function,UnitRange{Int64}})
        isdefined(DataFrames, Symbol("#443#445")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#443#445")),Array{Float64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{StepRange{Int64,Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._add_col_check_copy),DataFrame,DataFrame,Int64,Bool,Any,Symbol,Array{NamedTuple{(:s, :t),Tuple{Int64,Int64}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Float64,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{UnitRange{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(flatten),DataFrame,All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, DataFrame},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{String}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),ByRow{typeof(rand)},Array{Int64,1},UnitRange{Int64},UnitRange{Int64},GroupedDataFrame{DataFrame},Tuple{},Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{Symbol},InvertedIndex{InvertedIndex{Symbol}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{Symbol},InvertedIndex{InvertedIndex{Symbol}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(),Tuple{}},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Array{Any,1}})
        Base.precompile(Tuple{typeof(==),DataFrameRow{DataFrame,DataFrames.Index},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(filter),Pair{Array{Int64,1},typeof(!=)},DataFrame})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},MIME{Symbol("text/html")},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(transform),Function,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.get_stats),CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(names),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},InvertedIndex{Symbol}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Array{Any,1},Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(length),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Array{Int64,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.manipulate, (DataFrame,Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(DataFrames.manipulate),DataFrame,Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple{(:s, :t),Tuple{Int64,Int64}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames._show)),NamedTuple{(:rowid,),Tuple{Int64}},typeof(DataFrames._show),Base.TTY,MIME{Symbol("text/html")},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.stack)),NamedTuple{(:variable_eltype,),Tuple{UnionAll}},typeof(stack),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Missing}},Tuple{Array{Missing,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}},Array{Float64,2}}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1, :x2),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Float64,1},Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(stack),DataFrame,Symbol,Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Float64,1},Array{Float64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Nothing,Val{true},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#627#628")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#627#628")),SubArray{Int64,1,Array{Int64,1},Tuple{Base.OneTo{Int64}},true}})
        Base.precompile(Tuple{Type{DataFrame},GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :e),Tuple{Array{Union{Missing, Float64},1},Array{Int64,1},Array{Bool,1},Array{Any,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Tuple{Int64}}},Tuple{Array{Tuple{Int64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_y_function),Tuple{Array{Int64,1},Array{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(isequal),Array{DataFrame,1},Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}})
        Base.precompile(Tuple{typeof(DataFrames.append_rows!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Bool,1}},Int64,Tuple{Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(),Tuple{}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(sort),DataFrame,Regex})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Base.RefValue{NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}}}},Type{Ref},GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Complex{Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :g),Tuple{Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Float64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(==),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Float64,1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Array{Symbol,1},typeof(+)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64,Int64},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,DataFrame}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d),Tuple{Array{String,1},Array{Float64,1},Array{Int64,1},Array{Bool,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataAPI.describe, (DataFrame,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,typeof(describe),DataFrame,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(transform),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.disallowmissing)),NamedTuple{(:error,),Tuple{Bool}},typeof(disallowmissing),DataFrame,Symbol})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{String,1},Pair{typeof(+),String}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrames.DataFrameColumns{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:xyz, :xzz),Tuple{Array{Float64,1},Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),Function,GroupedDataFrame{DataFrame}})
        isdefined(DataFrames, Symbol("#ft_float#558")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#ft_float#558")),UndefInitializer,Int64,Int64})
        Base.precompile(Tuple{typeof(merge),NamedTuple{(),Tuple{}},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{Type{Array{T,1} where T},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Missing,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Array{Bool,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{Int64,Symbol}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Int64,2},UnitRange{Int64},All{Tuple{}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{InvertedIndex{Regex}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2_left, :x_left, :ID2_right, :x_right),NTuple{5,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Int64}},Tuple{Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{String}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g,),Tuple{StepRange{Int64,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Dict{Symbol,Any}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Between{Int64,Int64}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, String},1}},Tuple{Array{Union{Missing, String},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(Base.collect_to!),Array{NamedTuple{(:a, :b),T} where T<:Tuple,1},Base.Generator{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Type{NamedTuple}},Int64,Tuple{Base.OneTo{Int64},Int64}})
        Base.precompile(Tuple{typeof(Base.collect_to_with_first!),Array{NamedTuple{(:a, :b),Tuple{Symbol,Symbol}},1},NamedTuple{(:a, :b),Tuple{Symbol,Symbol}},Base.Generator{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Type{NamedTuple}},Tuple{Base.OneTo{Int64},Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :sid, :SID),Tuple{UnitRange{Int64},Array{String,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Function,Int64})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Float64,1},Array{Any,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :v2),Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(getindex),DataFrames.StackedVector{Union{Missing, Int64}},BitArray{1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :id2, :a, :b),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Between{Symbol,Int64}})
        Base.precompile(Tuple{typeof(map),Type{T} where T,DataFrames.GroupKeys{GroupedDataFrame{DataFrame}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{NamedTuple{(:b,),Tuple{Int64}},1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3, :x4),Tuple{UnitRange{Int64},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Bool},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(==),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Symbol,Array{Float64,1}},1}})
        Base.precompile(Tuple{typeof(==),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}},Array{Int64,1}})
        Base.precompile(Tuple{typeof(==),Array{Union{Missing, Int64},1},DataFrames.StackedVector{Union{Missing, Int64}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,Base.OneTo{Int64},Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Int64}},Tuple{Array{Union{Missing, Int64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(copy),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrame!),Dict{String,Any}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1, :x2),Tuple{SubArray{Int64,1,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Int64,1,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Number},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x),Tuple{Array{Int64,1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(append!),DataFrame,Dict{Symbol,AbstractArray{T,1} where T}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{NamedTuple{(:a, :b),Tuple{Int64,Symbol}},1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Array{String,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Pair{Symbol,Symbol}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(stack),DataFrame,Array{Any,1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:c_function,),Tuple{Array{Float64,1}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(==),DataFrames.RepeatedVector{Union{Missing, Float64}},DataFrames.RepeatedVector{Union{Missing, Float64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d),Tuple{Array{Int64,1},Array{String,1},Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{Symbol,Union{Missing, Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x2, :y),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(leftjoin),DataFrame,DataFrame})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Cols{Tuple{Colon}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},DataFrame}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Number},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, Int64},1}},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:z, :xzz),Tuple{Int64,Array{Int64,1}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1}}},Tuple{Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Tuple{Int64,Int64},Int64,Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Nothing,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Float64,String}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{Symbol,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Tuple{Bool,Bool,Bool},Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{Symbol,1},))
                end
            end
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},Array{Union{Missing, Number},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Real},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :matchmissing),Tuple{Array{Symbol,1},Symbol}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/latex")},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Base.RefValue{Int64},Array{Int64,0}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :b_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Any,1},UnitRange{Int64},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Array{Int64,1},1},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Bool,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{String,1}},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Symbol,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:x, :y),Tuple{Array{Int64,1},Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(iterate),Base.Iterators.Zip{Tuple{DataFrames.StackedVector{Union{Missing, Int64}},DataFrames.StackedVector{Union{Missing, Int64}}}},Tuple{Tuple{Base.OneTo{Int64},Int64},Tuple{Base.OneTo{Int64},Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Any})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Array{Float64,2}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Char,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},DataFrame,InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Array{Int64,2}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,InvertedIndex{String}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat!)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(DataFrames.hcat!),DataFrame,UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{InvertedIndex{Symbol},ByRow{typeof(/)}},Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.disallowmissing)),NamedTuple{(:error,),Tuple{Bool}},typeof(disallowmissing),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :a_1),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :z),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64, Int8},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.get_stats),Array{Int64,1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(convert),Type{DataFrame},Dict{String,Array{Union{Missing, Float64},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(semijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform!, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(transform!),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{String,1}},Int64})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_y_identity),Tuple{Array{Int64,1},Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{Int64,Any}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c_identity,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NTuple{4,Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{String,String}}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Array{Float64,2},1}})
        Base.precompile(Tuple{typeof(iterate),Array{Pair{AsTable,Pair{ByRow{typeof(identity)},Symbol}},1}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,InvertedIndex{InvertedIndex{Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :c, :d),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Irrational{:Ï€},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, Symbol},1,Array{Union{Missing, Symbol},1},Tuple{UnitRange{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat)),NamedTuple{(:inner, :outer),Tuple{Bool,Int64}},typeof(repeat),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.add_sum),Function,typeof(/),Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Array{Symbol,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},Array{Number,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Array{Any,1},typeof(identity)},Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(convert),Tuple{Base.RefValue{Type{Int64}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(floor),Tuple{DataFrame}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (DataFrame,Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(select),DataFrame,Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Float64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,typeof(first)},1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Number},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :variable, :value),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{Regex},InvertedIndex{InvertedIndex{Regex}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{Regex},InvertedIndex{InvertedIndex{Regex}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},InvertedIndex{Regex}})
        Base.precompile(Tuple{typeof(sort),DataFrame,InvertedIndex{Array{Any,1}}})
        Base.precompile(Tuple{typeof(DataFrames._copyto_helper!),SubArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}},true},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(identity),Tuple{Base.Broadcast.Extruded{Array{Int64,1},Tuple{Bool},Tuple{Int64}}}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Array{Float64,3},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,String,Union{Function, Type},Tuple{Array{Union{Missing, String},1}}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Real,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :sid, :SID),Tuple{UnitRange{Int64},Array{String,1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Float64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Array{T,1} where T,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{Pair},Tuple{Base.RefValue{AsTable},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{Pair},Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{ByRow},Tuple{Array{Function,1}}},Array{Symbol,1}}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g,),Tuple{UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Colon,Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}}},Tuple{Array{NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},1}},Int64,Int64,Type{Ref},GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:xyz, :xzz),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.ourshow),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},CategoricalArrays.CategoricalValue{String,UInt32},Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{InvertedIndex{InvertedIndex{Regex}}},InvertedIndex{InvertedIndex{InvertedIndex{InvertedIndex{Regex}}}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{InvertedIndex{InvertedIndex{Regex}}},InvertedIndex{InvertedIndex{InvertedIndex{InvertedIndex{Regex}}}},))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Pair{String,Pair{typeof(sum),Symbol}},1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.mul_prod),Function,Nothing,Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},All{Tuple{}}})
        Base.precompile(Tuple{Type{DataFrame},Array{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Rational{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Any,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),DataFrame,DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{Type{DataFrame},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Bool,Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Pair{Symbol,typeof(Statistics.mean)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_mean),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{AbstractArray{Int64,1},1},Symbol})
        Base.precompile(Tuple{typeof(rename),DataFrame,Pair{Int64,String}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Array{Pair{Symbol,String},1}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Regex,Regex,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Regex,Regex,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Union{Missing, Symbol},1},Array{Symbol,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Array{Any,1}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(min),Nothing,Nothing},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{String,String,Int64}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{Any,1},Pair{ByRow{typeof(rand)},Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :Key, :Value),Tuple{Array{String,1},Array{String,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Symbol})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.add_sum),Function,Nothing,Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,DataFrameRow{DataFrame,DataFrames.Index},Int64,Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Tuple{Array{Rational{Int64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Rational{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Int64,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select!)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(select!),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, DataFrame},1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Base.ReshapedArray{Int64,2,Base.OneTo{Int64},Tuple{}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :z),Tuple{Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x1),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:h, :z, :x3, :x2),Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Array{Float64,1},Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(append!),Array{Any,1},Array{Pair{typeof(nrow),Symbol},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :a, :b),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :keepkeys, :ungroup, :renamecols),NTuple{4,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Pair{Symbol,typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Array{Float64,3},DataFrame})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,NTuple{4,Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,NTuple{4,Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(last),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.add_sum),Function,typeof(/),Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Colon}}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/latex")},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :Mass, :Color),Tuple{Array{String,1},Array{String,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_var),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a,),Tuple{String}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Int64})
        Base.precompile(Tuple{typeof(categorical),DataFrame,InvertedIndex{Regex}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1, :x2),Tuple{Array{Int64,1},Array{Int64,1}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.unstack)),NamedTuple{(:renamecols,),Tuple{typeof(uppercase)}},typeof(unstack),DataFrame,Array{Symbol,1},Symbol,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :fid_1),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_sum,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Tuple{Symbol,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(groupby),DataFrame,Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, UInt8},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_sum, :g),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{UnitRange{Int64},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(dropmissing!),DataFrame,Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :fid_1),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},typeof(!),Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.show)),NamedTuple{(:allcols, :rowlabel, :eltypes, :truncate),Tuple{Bool,Symbol,Bool,Int64}},typeof(show),Base.PipeEndpoint,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Real},1}}})
        isdefined(DataFrames, Symbol("#400#401")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#400#401")),Pair{Array{Symbol,1},Pair{typeof(+),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Bool,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Cols{Tuple{Colon}},typeof(+)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Int64,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Tuple{Any,Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Array{Symbol,1},Bool,Array{Tuple{Float64,Float64},1},Union{Function, Type},Tuple{Array{Float64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Missing,1},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Complex{Float64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{String}},typeof(semijoin),DataFrame,DataFrame})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{Int64,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{Int64,1},))
                end
            end
        Base.precompile(Tuple{typeof(unique),DataFrame,Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{String,String,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,String}}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Array{Bool,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._copyto_helper!),SubArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}},true},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(identity),Tuple{Base.Broadcast.Extruded{StepRange{Char,Int64},Tuple{Bool},Tuple{Int64}}}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Array{Pair{String,Pair{typeof(first),String}},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:nrow,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(transform!),Function,DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Array{Array{Int64,1},1},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{InvertedIndex{InvertedIndex{Regex}}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:e,),Tuple{Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrame!),DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Array{BitArray{1},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Array{Float64,2}}}})
        Base.precompile(Tuple{typeof(merge),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:c, :d),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b, :c),Tuple{Symbol,Int64,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :b_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:b_sum,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x_function),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},UnitRange{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Type{DataFrameRow},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Int64,Regex})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{Int64},Cols{Tuple{Colon}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :a_b_c_sum),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:p, :q),Tuple{Array{Float64,1},Array{Float64,1}}},Tuple{Array{Float64,1},Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(innerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Complex{Float64}},1}}})
        Base.precompile(Tuple{typeof(IteratorInterfaceExtensions.getiterator),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(),Tuple{}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(sum),Symbol}},Pair{Int64,Pair{typeof(sum),Symbol}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrames.SubIndex},DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:p, :q),Tuple{Array{Float64,1},Array{Float64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Name, :Quantity),Tuple{Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(copy),DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C, :D, :E, :F, :G, :H),Tuple{UnitRange{Int64},StepRange{Char,Int64},Array{String,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, Int64},1},Array{Missing,1},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Int64}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum),Tuple{UnitRange{Int64},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:t,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :c),Tuple{Array{Missing,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(coalesce),Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Bool},Tuple{Int64}},Base.RefValue{Nothing}}},Int64,Int64})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,1}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{String,AbstractArray{Int64,1}},1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},SubArray{Float64,1,Array{Float64,1},Tuple{Base.Slice{Base.OneTo{Int64}}},true}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:a, :b),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},DataFrame})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Bool,1},Colon})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Base.OneTo{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Tables.columntable),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a,),Tuple{Irrational{:Ï€}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},All{Tuple{}},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name),Tuple{Missing,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,StepRange{Int64,Int64},Union{Function, Type},Tuple{Array{UnitRange{Int64},1}}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Dict{String,String}})
        Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Dict{Symbol,Symbol},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{Dict},Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{Type{Tuple},DataFrames.GroupKey{GroupedDataFrame{DataFrame}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},UnitRange{Int64},Symbol})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.std),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Array{Float64,3}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :x1, :x2),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1},Array{Complex{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{Int64},InvertedIndex{Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, UnitRange{Int64}},1}}})
        Base.precompile(Tuple{typeof(dropmissing!),DataFrame,Regex})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(select!),DataFrame,Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Type{DataFrame},Array{Any,2},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:xmax,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Int64,Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Number,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Array{String,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{String,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Integer,1},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :a, :b),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Array{Int64,1},Function})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Float64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Union{Missing, Int64},1},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,String,Union{Function, Type},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(sort),DataFrame,Function})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,typeof(sum)},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(repr),MIME{Symbol("text/latex")},DataFrames.DataFrameRows{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :id_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Int64},Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:p, :q),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Float64,1}},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :copycols),Tuple{Int64,Array{Any,1},Bool}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(unique),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{Pair{Symbol,CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing}},1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Float64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Pair{Symbol,Pair{typeof(parent),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Complex{Int64},Union{Function, Type},Tuple{Array{Complex{Int64},1}}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,Function},1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Missing,1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,Int64,Symbol}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Complex{Float64}},1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Number},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Float64,1},Array{String,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :id),Tuple{Array{Int64,1},Array{Float64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.vect),DataFrameRow{DataFrame,DataFrames.Index},Vararg{Any,N} where N})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(transform!),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(unique),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{String,1}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{AsTable,ByRow{typeof(identity)}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{Array{AbstractArray{T,1} where T,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:xyz,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:res, :x1_length),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:x1, :x2),Tuple{Int64,Int64}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :copycols),Tuple{Array{Int64,1},Array{Int64,1},Bool}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :g),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(values),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(collect),Base.Generator{DataFrames.DataFrameColumns{DataFrame},Type{Array{Float64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(combine),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Union{Missing, Int64},1},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{String,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.Index,Array{Union{Missing, String},1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Base.OneTo{Int64}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{String,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}},Array{Float64,2}}},Int64})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :b),Tuple{Int64,Int64}},Int64,Colon})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{Int64, Tuple{Symbol,Int64}},1}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/csv")},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{BigInt}},Function,GroupedDataFrame{DataFrame},Tuple{Array{BigInt,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{SubString{String},Array{Int64,1}},1}})
        Base.precompile(Tuple{typeof(DataFrames.get_stats),Array{Any,1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:x1,),Tuple{Array{Any,1}}},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1, :x2),Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Array{Int64,1},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{typeof(getindex),DataFrameRow{DataFrame,DataFrames.Index},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,Array{Int64,1},Function})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Array{Int64,1}},false},Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{Symbol,Int64}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(coalesce),Tuple{DataFrame,Base.RefValue{Nothing}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name),Tuple{Float64,String}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Int64})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Colon}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{Pair{String,CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :c),Tuple{Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:v,),Tuple{Float64}},Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.stack)),NamedTuple{(:variable_name, :value_name, :view),Tuple{Symbol,Symbol,Bool}},typeof(stack),DataFrame,Array{Symbol,1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),Array{Int64,2},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, BigFloat},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{UnitRange{Int64},1}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{Regex}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Symbol},1},Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(:x1, :x2, :x3, :x4),NTuple{4,Float64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64},1}}},Tuple{Array{Tuple{Int64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:x,),Tuple{Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{Symbol,Any}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Symbol,String}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},InvertedIndex{Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},InvertedIndex{Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,UnionAll}})
        Base.precompile(Tuple{typeof(filter!),Pair{Array{Int64,1},typeof(!=)},DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Dict{Any,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},UnitRange{Int64}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{String,1},UnitRange{Int64},Int64})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false},SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{Symbol,1},Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(hcat),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :x),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Number,1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{Int64},InvertedIndex{InvertedIndex{Int64}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{Int64},InvertedIndex{InvertedIndex{Int64}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(coalesce),Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Bool},Tuple{Int64}},Base.RefValue{Nothing}}},Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,String,Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Type{DataFrame},Tuple{Pair{Symbol,UnitRange{Int64}},Pair{Symbol,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Cols{Tuple{Colon}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :bin),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Complex{Int64}}},Tuple{Array{Complex{Int64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{UnitRange{Int64},Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Tables.MatrixTable{Array{Float64,2}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{String,String,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :g_Ref),Tuple{UnitRange{Int64},Array{NamedTuple{(:g,),Tuple{Array{Int64,1}}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Regex,typeof(Statistics.cor)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:c_sum,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :z),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:p, :q),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{Int64,1},typeof(+)}})
        Base.precompile(Tuple{Type{Dict},DataFrames.GroupKey{GroupedDataFrame{DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x_first),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :y),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(:x,),Tuple{Int64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Bool}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Bool},1}},Val{false},Array{Int64,1}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Symbol,Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Symbol,Array{Any,1},))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,Symbol},1}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Union{Missing, String},1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(columnindex),Tuple{Base.RefValue{SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}},Array{String,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,Int64,Union{Function, Type},NTuple{5,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,String,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{Type{Array{T,2} where T},SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}})
        let fbody = try __lookup_kwbody__(which(DataFrames._combine_prepare, (GroupedDataFrame{DataFrame},Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,Bool,typeof(DataFrames._combine_prepare),GroupedDataFrame{DataFrame},Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Array{Float64,1},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :z),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{5,SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Symbol})
        Base.precompile(Tuple{typeof(transform),GroupedDataFrame{DataFrame},Function,Function,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x,),Tuple{CategoricalArrays.CategoricalValue{String,UInt32}}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Float64,1},Array{Union{Missing, Real},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(+),Tuple{Tuple{Int64,Int64},Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{6,DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g1, :x1, :g2, :x2),Tuple{Array{Int64,1},UnitRange{Int64},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.std),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{DataFrame,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :ID2, :x_1),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Missing,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:p, :q),Tuple{Array{Float64,1},Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Float64}},Tuple{Array{Union{Missing, Float64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Tuple{Symbol},Val{false}})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),Array{Any,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :id_1),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{UInt64},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64, Int8},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Int64,String,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Symbol,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(findall),Function,DataFrames.DataFrameColumns{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Tuple{Int64},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:e, :x, :y),Tuple{Array{String,1},Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{NamedTuple{(:a,),Tuple{Symbol}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Int64,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, Int64},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, Int64},UInt8,1,Array{UInt8,1}},Array{Bool,1},Array{Union{Missing, Bool},1},Array{Union{Missing, Bool},1},Array{Float64,1},Array{Union{Missing, Float64},1},Array{Union{Missing, Float64},1},Array{String,1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Tuple{Int64,Int64,Int64},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform!)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(transform!),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(view),DataFrame,InvertedIndex{Int64},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper),DataFrame,SubArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}},true},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,Bool})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},All{Tuple{}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},All{Tuple{}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:C,),Tuple{UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}})
        Base.precompile(Tuple{typeof(hash),DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(view),DataFrame,Function,Array{Union{Missing, Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Type{DataFrames.SubIndex},DataFrames.Index,Cols{Tuple{Colon}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},NamedTuple{(),Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{String,1}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Symbol,InvertedIndex{Symbol},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Symbol,InvertedIndex{Symbol},))
                end
            end
        Base.precompile(Tuple{typeof(categorical!),DataFrame,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,BigFloat,Union{Function, Type},Tuple{Array{BigFloat,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{UnitRange{Int64},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},UnitRange{Int64},Cols{Tuple{Colon}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Any,1},Array{Symbol,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Any,1},Array{Symbol,1},))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:xyz,),Tuple{Tuple{Int64}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{typeof(unique),DataFrame,Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Any,1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),String,Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(min),Nothing,Nothing},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.rowhash),Tuple{Array{Symbol,1}},Int64,UInt64})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{InvertedIndex{Symbol},ByRow{typeof(/)}}})
        Base.precompile(Tuple{typeof(transform),DataFrame,Any,Any})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Base.RefValue{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(haskey),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Int64,1},Array{Bool,1},Int64})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Column,),Tuple{Array{Symbol,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(sort),DataFrame,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:b,),Tuple{Array{Int64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},Int64,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{String,1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1}},Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}},Array{Int64,1}}}})
        isdefined(DataFrames, Symbol("#632#635")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#632#635")),Array{Bool,1}})
        Base.precompile(Tuple{typeof(iterate),Base.Iterators.Zip{Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Symbol}},1},Tables.NamedTupleIterator{Tables.Schema{(:a, :b),Tuple{Int64,Symbol}},Tables.RowIterator{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Symbol,1}}}}},DataFrames.DataFrameRows{DataFrame,DataFrames.Index}}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},typeof(!),Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{String,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},DataFrame})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,Pair{typeof(sum),Symbol}},1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Union{Missing, String},1}},Tuple{Array{Union{Missing, String},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(),Tuple{}},Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{String,1},Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Complex{Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{Array{T,1} where T},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Function,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Pair{String,Array{Float64,1}},Vararg{Pair{String,Array{Float64,1}},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{DataFrameRow{DataFrame,DataFrames.Index},1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Rational{Int64},1}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,NamedTuple{(:a, :b),Tuple{Int64,Bool}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x2,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :b_1),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function, :y_function),Tuple{Array{Tuple{Int64},1},Array{Tuple{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, BigFloat},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Job, :_left),Tuple{Array{Int64,1},Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c,),Tuple{Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Union{Missing, Int64},1},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{Symbol,1},Pair{typeof(+),Symbol}}})
        Base.precompile(Tuple{typeof(view),DataFrame,Function,All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :sid, :SID),Tuple{UnitRange{Int64},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Base.Generator{UnitRange{Int64},typeof(identity)},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},SubArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}},true},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,Bool})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, Symbol},1,Array{Union{Missing, Symbol},1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},InvertedIndex{Colon}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Union{Missing, Int64},1}}})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),Array{Union{Missing, Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(hcat),UnitRange{Int64},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x,),Tuple{CategoricalArrays.CategoricalValue{String,UInt32}}},Function,GroupedDataFrame{DataFrame},Nothing})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Array{String,1},typeof(+)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(Statistics.std),Symbol}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{Dict},Tuple{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Base.RefValue{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(hcat),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,1},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{ByRow{typeof(+)},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1}},Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{},Val{true}})
        Base.precompile(Tuple{typeof(in),NamedTuple{(:a, :b),Tuple{Symbol,Int64}},DataFrames.GroupKeys{GroupedDataFrame{DataFrame}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{BitArray{1},BitArray{1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(names),DataFrame,Type{T} where T})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{NamedTuple{(:a,),T} where T<:Tuple,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a,),Tuple{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Irrational{:Ï€}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Irrational{:Ï€},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Array{Float64,1},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:z, :y, :x),Tuple{Int64,Int64,Int64}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{Array{Symbol,1}},InvertedIndex{InvertedIndex{Array{Symbol,1}}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{Array{Symbol,1}},InvertedIndex{InvertedIndex{Array{Symbol,1}}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Irrational{:Ï€},Union{Function, Type},Tuple{Array{Irrational{:Ï€},1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Between{Symbol,Symbol},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Complex{Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Real,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c_sum,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:a, :b),Tuple{Float64,Missing}},Tuple{Array{Float64,1},Array{Union{Missing, String},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{typeof(nrow),1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :copycols),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing},Bool}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(Statistics.var, (SubArray{DataFrame,1,Array{DataFrame,1},Tuple{Array{Int64,1}},false},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Nothing,Function,typeof(Statistics.var),SubArray{DataFrame,1,Array{DataFrame,1},Tuple{Array{Int64,1}},false},))
                end
            end
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Real,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:c, :d),Tuple{String,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Tuple{Symbol,Symbol},typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{StepRange{Int64,Int64}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        isdefined(DataFrames, Symbol("#627#628")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#627#628")),SubArray{String,1,Array{String,1},Tuple{Base.OneTo{Int64}},true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:keepkeys,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Pair{Symbol,Pair{typeof(identity),Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x4, :x1, :x3, :x2),Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Array{Float64,1},Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},BitArray{1},Symbol})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Pair{Symbol,typeof(sum)}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,All{Tuple{}}})
        Base.precompile(Tuple{typeof(getindex),DataFrameRow{DataFrame,DataFrames.Index},All{Tuple{}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Dict{String,Int64},Int64,Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(),Tuple{}},Tuple{},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{},Val{true}})
        Base.precompile(Tuple{typeof(transform!),DataFrame,Any})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Function,UnitRange{Int64}})
        Base.precompile(Tuple{Type{DataFrame},Array{UnitRange{Int64},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},DataFrames.StackedVector{Union{Missing, Int64}},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Float64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select!)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(select!),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x1),Tuple{Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(reduce),typeof(vcat),Array{AbstractDataFrame,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right, :ind),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},UnitRange{Int64}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{String,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{DataFrame,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :e),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{InvertedIndex{Regex}},InvertedIndex{InvertedIndex{InvertedIndex{Regex}}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{InvertedIndex{Regex}},InvertedIndex{InvertedIndex{InvertedIndex{Regex}}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Pair{Symbol,Symbol}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{UnitRange{Int64},StepRange{Char,Int64},Array{Symbol,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :a),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :Job, :_merge),Tuple{Array{Int64,1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{AsTable,UnionAll}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x2,),Tuple{Array{Bool,1}}},Tuple{Array{Bool,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,1},Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(crossjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{String,Int64,String}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,Int64,Int64}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Union{Function, Type},Tuple{Array{UnitRange{Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:v,),Tuple{Array{Float64,1}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,NTuple{4,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(hcat),Array{Int64,1},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :_MASS_, :_COLOR_),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Real},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :g_f1, :g_f2),Tuple{Array{Int64,1},Array{String,1},Array{String,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:keepkeys, :ungroup),Tuple{Bool,Bool}},typeof(combine),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Missing,1},Array{Union{Missing, Number},1}})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Dict{Symbol,UnitRange{Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :renamecols, :indicator),Tuple{Array{Any,1},Pair{String,String},Symbol}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64},1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:x,),Tuple{Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Tuple{Int64,Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :x1, :x2),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Dict{Symbol,Int64},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{Dict},Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, Symbol},1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Function,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,typeof(identity)}})
        Base.precompile(Tuple{typeof(==),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.Index,Array{Union{Missing, BigInt},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Tuple{Array{Union{Missing, String},1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Symbol,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Missing}},Tuple{Array{Missing,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Float64,1},Array{Union{Missing, String},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3),Tuple{Array{Union{Missing, Float64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{InvertedIndex{Regex},Regex}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Symbol,1},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :b),Tuple{Int64,Int64}},Int64,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,DataFrame,Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,UnitRange{Int64},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Char},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NamedTuple{(:x,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},Int64,Cols{Tuple{Colon}}})
        Base.precompile(Tuple{typeof(DataFrames.ourshow),Base.GenericIOBuffer{Array{UInt8,1}},Float32,Int64})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{String,1}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.stack)),NamedTuple{(:variable_name, :value_name, :view),Tuple{String,String,Bool}},typeof(stack),DataFrame,Array{String,1},Array{String,1}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,StepRange{Int64,Int64}},StepRange{Int64,Int64},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{5,DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:keepkeys,),Tuple{Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Function,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Array{Float64,2},1}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Int64,2},Array{Symbol,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(+),Tuple{Base.Broadcast.Extruded{Array{Float64,1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Base.ReshapedArray{Int64,2,Base.OneTo{Int64},Tuple{}},Tuple{Bool,Bool},Tuple{Int64,Int64}}}},CartesianIndex{2}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(identity),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :x_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(copyto!),CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Int64,DataFrames.RepeatedVector{CategoricalArrays.CategoricalValue{String,UInt32}},Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :id2, :variable, :value),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{BigFloat}},Function,GroupedDataFrame{DataFrame},Tuple{Array{BigFloat,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.stack)),NamedTuple{(:view,),Tuple{Bool}},typeof(stack),DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :a, :b, :c),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:xyz, :xzz),Tuple{Array{Float64,1},Array{Int64,1}}},Tuple{Array{Float64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Int64, Int8},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Regex})
        Base.precompile(Tuple{typeof(append!),DataFrame,Dict{String,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        isdefined(DataFrames, Symbol("#ft_float#558")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#ft_float#558")),String,Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :ID2, :y),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Real},1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Int64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Rational{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{12,DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(prod),Symbol}}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :col),Tuple{Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(iterate),Base.Iterators.Zip{Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Symbol}},1},Tables.NamedTupleIterator{Tables.Schema{(:a, :b),Tuple{Int64,Symbol}},Tables.RowIterator{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Symbol,1}}}}},DataFrames.DataFrameRows{DataFrame,DataFrames.Index}}},Tuple{Int64,Tuple{Int64},Tuple{Base.OneTo{Int64},Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Number},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Rational{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Union{Missing, Int64},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:c_function,),Tuple{Array{Float64,1}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :c),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{String}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, String},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.append!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(append!),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,Symbol})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Dict{Symbol,V} where V,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},NTuple{4,Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(haskey),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{Union{Missing, Float64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,NTuple{4,Symbol},Val{true}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair,1}})
        Base.precompile(Tuple{Type{DataFrame},Tuple{Pair{String,UnitRange{Int64}},Pair{String,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Array{Float64,2}},1}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{Symbol}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name),Tuple{Array{Union{Missing, Int64},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),ByRow{typeof(minmax)},Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{Int64,Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:b, :a),Tuple{Int64,Int64}},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.Index,Array{BigInt,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Array{Int64,1}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1, :x2),Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Nothing,Val{true},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{UnitRange{Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,2},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Array{Symbol,1}}},typeof(reduce),typeof(vcat),Tuple{DataFrame,DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :a_b, :a_b_etc),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},StepRange{Int64,Int64},StepRange{Int64,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{DataFrameRow{DataFrame,DataFrames.Index},1}}},Tuple{Array{DataFrameRow{DataFrame,DataFrames.Index},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},Cols{Tuple{Colon}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1},Array{Missing,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Function,Array{Union{Missing, Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Any,1}})
        Base.precompile(Tuple{typeof(categorical),DataFrame})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{String,Int64}}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,All{Tuple{}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,All{Tuple{}},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Bool},1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Symbol,Symbol},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:c,),Tuple{Missing}}})
        Base.precompile(Tuple{typeof(transform),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Array{Any,1},Pair{ByRow{typeof(rand)},Symbol}},Bool})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames._show)),NamedTuple{(:rowid,),Tuple{Int64}},typeof(DataFrames._show),Base.TTY,MIME{Symbol("text/latex")},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Symbol,Pair{Symbol,Symbol},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Symbol},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(:a, :b, :c),Tuple{Int64,Int64,Int64}},DataFrame})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Number,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrames.DataFrameColumns{DataFrame},Base.RefValue{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:c_function,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Array{Int64,1}}}})
        Base.precompile(Tuple{Type{Array{T,2} where T},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:z,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:a, :b),Tuple{Float64,String}},Tuple{Array{Float64,1},Array{String,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:z,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.show)),NamedTuple{(:allrows, :allcols, :allgroups, :rowlabel, :summary, :truncate),Tuple{Bool,Bool,Bool,Symbol,Bool,Int64}},typeof(show),Base.PipeEndpoint,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,Array{Integer,1},Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Bool},1}}})
        Base.precompile(Tuple{typeof(Base.setindex_widen_up_to),Array{DataFrames.RepeatedVector{Union{Missing, Float64}},1},DataFrames.RepeatedVector{Union{Missing, String}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{String,Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Any,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(categorical),DataFrame,InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Int64,1},Colon,Int64})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Rational{Int64},1},Array{Real,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:variable, :value, :id),Tuple{Array{String,1},Array{Missing,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(delete!),DataFrame,InvertedIndex{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Int64,Int64}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,Symbol}}})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat)),NamedTuple{(:inner, :outer),Tuple{Int64,Int64}},typeof(repeat),DataFrame})
        Base.precompile(Tuple{typeof(categorical),DataFrame,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,B} where B,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h),Tuple{Array{Float64,1},Array{Float64,1},Array{Int64,1},Array{Union{Missing, Float64},1},Array{String,1},Array{Symbol,1},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(iterate),Base.Iterators.Zip{Tuple{DataFrames.StackedVector{Union{Missing, Int64}},DataFrames.StackedVector{Union{Missing, Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Symbol,1},Array{Symbol,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Symbol,1},Array{Symbol,1},))
                end
            end
        Base.precompile(Tuple{typeof(combine),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Any,Any})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(length),Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat!)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(DataFrames.hcat!),DataFrame,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:keepkeys, :ungroup),Tuple{Bool,Bool}},typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Symbol})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(Base.collect_to_with_first!),Array{NamedTuple{(:a, :b),Tuple{Symbol,Int64}},1},NamedTuple{(:a, :b),Tuple{Symbol,Int64}},Base.Generator{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Type{NamedTuple}},Tuple{Base.OneTo{Int64},Int64}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Regex}})
        Base.precompile(Tuple{typeof(copy),DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :copycols),Tuple{Array{Int64,1},Array{Float64,1},Bool}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames._combine_prepare, (GroupedDataFrame{DataFrame},Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,Bool,typeof(DataFrames._combine_prepare),GroupedDataFrame{DataFrame},Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(:a, :b, :c, :d),NTuple{4,Float64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Base.RefValue{NamedTuple{(:x, :y),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}},Union{Function, Type},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrame!),Pair{Symbol,Array{Int64,1}},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,UnitRange{Int64},Function})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{Array{Int64,1},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{Symbol,AbstractArray{Int64,1}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :a_b_c_sum_sum),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :b, :d, :a),Tuple{Array{String,1},Array{Float64,1},Array{Bool,1},Array{Char,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(convert),Type{DataFrame},Dict{String,Array{T,1} where T}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Function,UnitRange{Int64}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :fid_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Tuple{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :y),Tuple{Array{Int64,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Real,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{Int64,UInt32},1,CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Float64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),NTuple{4,Array{Float64,1}},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3, :x4),Tuple{Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Array{Float64,1},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Number,1}}})
        Base.precompile(Tuple{typeof(==),DataFrames.StackedVector{Union{Missing, Int64}},DataFrames.StackedVector{Union{Missing, Int64}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{Any,Int64}})
        Base.precompile(Tuple{typeof(unique),DataFrame,InvertedIndex{Array{Bool,1}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Float64,2},Symbol})
        Base.precompile(Tuple{typeof(isless),DataFrameRow{DataFrame,DataFrames.Index},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,InvertedIndex{InvertedIndex{Array{Symbol,1}}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,InvertedIndex{Array{Symbol,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:variable, :mean),Tuple{Array{Symbol,1},Array{Union{Nothing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,BitArray{1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.mul_prod),Function,Nothing,Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, BigFloat},1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.unstack, (DataFrame,Symbol,Symbol,Symbol,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,Bool,Bool,typeof(unstack),DataFrame,Symbol,Symbol,Symbol,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :x),NTuple{4,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2_left, :x_left, :ID2_right, :x_right),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(collect),Base.Generator{DataFrames.DataFrameColumns{DataFrame},typeof(typeof)}})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,Regex})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Char,1,UInt32,Char,CategoricalArrays.CategoricalValue{Char,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),DataFrames.RowGroupDict{DataFrame},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :x),Tuple{Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Tables.columntable),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(map),Function,DataFrames.DataFrameColumns{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Union{Missing, Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Real,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(==),DataFrames.RepeatedVector{Union{Missing, Int64}},DataFrames.RepeatedVector{Union{Missing, Int64}}})
        isdefined(DataFrames, Symbol("#ft_float#558")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#ft_float#558")),Irrational{:Ï€},Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1,),Tuple{Array{Bool,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,typeof(last)},1},Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(hcat),CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,Int64,typeof(+)})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{String}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Array{String,1}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a, :b, :c),Tuple{Int64,Float64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Real,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :sid, :SID),Tuple{UnitRange{Int64},Array{Union{Missing, String},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Bool}},Tuple{Array{Bool,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :c, :d),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :a, :b),Tuple{Array{Int64,1},Array{Union{Nothing, String},1},Array{Union{Nothing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Dict{Symbol,V} where V,1},Array{Dict{Symbol,Any},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{Dict},Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},Tuple{Bool},Tuple{Int64}}}},Dict{Symbol,Union{Missing, Int64}},Int64,Base.OneTo{Int64},Int64,Int64})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{String,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a,),Tuple{Array{Union{Missing, BigFloat},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Complex{Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},Tuple{}})
        Base.precompile(Tuple{typeof(repeat),DataFrame,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Float64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Int64,2},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1}},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:x, :y),Tuple{Array{Int64,1},Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,DataFrame,Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},Array{String,1}})
        Base.precompile(Tuple{typeof(unique),DataFrame,InvertedIndex{Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :keep, :g_function),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#443#445")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#443#445")),Array{Char,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{},Val{false},Nothing})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),DataFrame,Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(maximum),Symbol}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Bool,1},1},Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x2, :y),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{String,1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,InvertedIndex{Int64},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Pair{Symbol,typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Fish, :_MASS_, :_COLOR_),Tuple{Array{String,1},Array{String,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Tuple{Float64,Float64},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(innerjoin),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_mean_skipmissing),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Array{Symbol,1},Bool,Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum_skipmissing),Tuple{Int64,Int64}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Regex,InvertedIndex{Regex},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Regex,InvertedIndex{Regex},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},1}}},Tuple{Array{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Complex{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.hcat)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(hcat),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:x, :y),Tuple{Int64,Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Bool,1},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(maximum),Symbol}},Pair{Symbol,Pair{typeof(sum),Symbol}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},UnitRange{Int64},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :c),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.collect_to_with_first!),Array{DataType,1},Type{T} where T,Base.Generator{DataFrames.DataFrameColumns{DataFrame},typeof(typeof)},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{UnitRange{Int64},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        Base.precompile(Tuple{Type{Array{Any,N} where N},Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}})
        Base.precompile(Tuple{ByRow{typeof(+)},Array{Float64,1},Vararg{Array{Float64,1},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :renamecols, :indicator),Tuple{Array{Any,1},Pair{String,String},Symbol}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,Base.Order.Perm{Base.Order.ForwardOrdering,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{AbstractArray{T,1} where T,1},Array{SubString{String},1}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Int64,String}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Any,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Float64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y,),Tuple{Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Type{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Int64,1},Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,NTuple{5,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,UnitRange{Int64},Union{Function, Type},Tuple{Array{Union{Missing, UnitRange{Int64}},1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Array{Int64,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},InvertedIndex{UnitRange{Int64}},InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{Int64},All{Tuple{}}})
        Base.precompile(Tuple{typeof(unique),DataFrame,InvertedIndex{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Complex{Int64},1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select!, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(select!),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Ref,),Tuple{NamedTuple{(),Tuple{}}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Pair{Symbol,Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.antijoin)),NamedTuple{(:on,),Tuple{String}},typeof(antijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Int64}},Tuple{Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{String,1},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Tuple{Symbol,Int64},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{Array{Float64,3},1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        isdefined(DataFrames, Symbol("#444#446")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#444#446")),Array{Float64,1}})
        Base.precompile(Tuple{Type{DataFrame},Pair{String,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(view),DataFrame,typeof(!),Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(transform),DataFrame,Any})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:b_function, :c_identity),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Number},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(convert),Tuple{Base.RefValue{Type{Int64}},DataFrame}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.std),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :x1),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},Array{Array{Int64,1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid, :id_1),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Number,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Tuple{Int64,Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(semijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x, :y, :z),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},Tuple{Array{String,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{Int64, NamedTuple{(:a, :b),Tuple{Symbol,Int64}}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c, :b, :d, :a, :e),NTuple{5,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(identity),Tuple{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:p, :q),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrame,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{typeof(stack),DataFrame,Array{Any,1},Symbol})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{DataFrame,1}}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Number,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{BigFloat}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, BigFloat},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Pair{Symbol,Pair{Function,Symbol}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,Symbol,CategoricalArrays.CategoricalValue{String,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.describe)),NamedTuple{(:cols,),Tuple{InvertedIndex{String}}},typeof(describe),DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(min),Nothing,Nothing},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Tuple{Int64,Int64},2},Symbol})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/csv")},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Any,1},UnitRange{Int64},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.show)),NamedTuple{(:summary,),Tuple{Bool}},typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},DataFrame})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Int64}},DataFrame}}})
        Base.precompile(Tuple{typeof(groupby),DataFrame,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :C, :B),Tuple{Int64,Missing,Float64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64}},SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1_function, :a),Tuple{Array{Any,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(),Tuple{}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{Int64,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Job),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),Array{Union{Missing, String},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.categorical!)),NamedTuple{(:compress,),Tuple{Bool}},typeof(categorical!),DataFrame,InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1, :x2),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Nothing,Val{true},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Pair{Symbol,Symbol}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :_left, :Job, :_left_1, :_left_2),Tuple{Array{Int64,1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},BigInt,Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:c,),Tuple{Int64}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},Array{Int64,2},Function})
        Base.precompile(Tuple{typeof(DataFrames._manipulate),DataFrame,Any,Bool,Bool})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Rational{Int64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.vect),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Vararg{SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},N} where N})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(-),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x1),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Dict{Int64,String}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:keepkeys,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{Type{DataFrame},Pair{String,Array{Any,1}},Vararg{Pair{String,Array{Any,1}},N} where N})
        Base.precompile(Tuple{typeof(iterate),DataFrames.StackedVector{Union{Missing, Int64}},Tuple{Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c_sum,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Pair{UnitRange{Int64},typeof(+)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_y_Ref),Tuple{UnitRange{Int64},Array{NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :Ref),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},NamedTuple{(),Tuple{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Int64,1},Array{Float64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:a, :b),Tuple{Float64,String}},Tuple{Array{Float64,1},Array{Union{Missing, String},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Symbol},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Any,1},Union{Function, Type},NamedTuple{(),Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c_function,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Rational{Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Pair{BigInt,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :D),Tuple{Int64,Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(convert),Type{DataFrame},Array{Float64,2}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Bool,1}}},Tuple{Array{Bool,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),DataFrameRow{DataFrame,DataFrames.Index},Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{Union{Missing, Float64},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,NTuple{4,Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.vcat)),NamedTuple{(:cols,),Tuple{Array{String,1}}},typeof(vcat),DataFrame,Vararg{DataFrame,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :x),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.stack)),NamedTuple{(:view, :variable_eltype),Tuple{Bool,DataType}},typeof(stack),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.hashrows),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,Symbol,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Bool})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a1, :a2, :b1, :b2, :c1, :c2),Tuple{UnitRange{Int64},Array{Union{Missing, Int64},1},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Union{Missing, Float64},1},StepRange{Char,Int64},Array{Union{Missing, Char},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Base.OneTo{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(identity),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:b,),Tuple{Int64}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x_sum,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Base.OneTo{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :id, :y, :z),Tuple{Array{Float64,1},Array{Int64,1},Array{Float64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),GroupedDataFrame{DataFrame},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Pair{Symbol,Pair{typeof(sum),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(semijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Float64,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,Pair{ByRow{typeof(identity)},DataType}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},Array{Int64,1},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Rational{Int64}},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{String}},Tuple{Array{String,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(identity)}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{Symbol,Int64},Dict{Symbol,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(==),GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}},GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Union{Missing, Int64},1},1},Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{UnitRange{Int64},StepRange{Char,Int64}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.unstack, (DataFrame,Symbol,Symbol,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,Bool,Bool,typeof(unstack),DataFrame,Symbol,Symbol,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Base.OneTo{Int64},Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat!)),NamedTuple{(:inner, :outer),Tuple{Int64,Bool}},typeof(repeat!),DataFrame})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Bool,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y,),Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Any,1}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Int64,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(getindex),Tuple{DataFrames.GroupKeys{GroupedDataFrame{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}}},Int64}}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Pair{Bool,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Symbol,Function},Bool})
        Base.precompile(Tuple{typeof(getindex),DataFrameRow{DataFrame,DataFrames.Index},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._filter!_helper),DataFrame,typeof(==),Array{Int64,1},Vararg{Array{Int64,1},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,DataFrame,Colon,All{Tuple{}}})
        Base.precompile(Tuple{Type{DataFrames.SubIndex},DataFrames.Index,Between{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{ByRow{typeof(-)},Array{Int64,1}})
        Base.precompile(Tuple{typeof(unstack),DataFrame,Int64,Int64})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},StepRange{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_sum, :g),Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{String,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Number},1},GroupedDataFrame{DataFrame}})
        isdefined(DataFrames, Symbol("#ft_float#558")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#ft_float#558")),Float32,Int64,Int64})
        Base.precompile(Tuple{typeof(stack),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NTuple{4,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.append_rows!),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Tuple{Array{Bool,1}},Int64,Tuple{Symbol}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Bool,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Bool,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},typeof(identity)})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.RepeatedVector{Symbol},Array{Int64,1}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Function,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Function,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:z,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(Base.add_sum),Function,Nothing,Array{Union{Missing, Complex{Float64}},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),DataFrameRow{DataFrame,DataFrames.Index},Tuple{Array{Int64,1},Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Dict{String,Symbol}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Complex{Float64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrame,Union{Function, Type},Tuple{Array{Union{Missing, DataFrame},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Array{Any,1},typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, Symbol},1,Array{Union{Missing, Symbol},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(:x1, :x2),Tuple{Float64,Float64}},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Int64,1},Array{String,1},Array{Float32,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},DataFrameRow{DataFrame,DataFrames.Index},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(unstack),DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{8,SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Int64,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(==),Array{DataFrame,1},Array{DataFrame,1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.RefValue{DataFrameRow{DataFrame,DataFrames.Index}},Array{String,1}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Int64,1},Base.OneTo{Int64},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Bool,1}}},Tuple{Array{Bool,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false},Union{Function, Type},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},typeof(nrow)})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{UnitRange{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Number,1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d, :e),Tuple{Array{Int64,1},Array{Int64,1},UnitRange{Int64},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Int64, Int8},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Regex})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Float64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),ByRow{typeof(sin)},Array{Int64,1},UnitRange{Int64},UnitRange{Int64},GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Int64})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{DataFrame,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Bool},1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Regex})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Array{Any,1}}})
        Base.precompile(Tuple{typeof(map),Function,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:nrow,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Tuple{Int64},1},Union{Function, Type},NamedTuple{(:y,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Base.OneTo{Int64}},true},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Base.OneTo{Int64}},true}},Val{true}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Array{Symbol,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Bool,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :a_1),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Array{Float64,2},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Missing},1},Symbol})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Cols{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Complex{Float64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Complex{Float64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{NamedTuple{(:a, :b),T} where T<:Tuple,1}})
        Base.precompile(Tuple{typeof(DataFrames._add_col_check_copy),DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Nothing,Bool,Any,Symbol,Array{Array{Int64,1},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{DataFrames.RepeatedVector{String}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Union{Missing, Rational{Int64}},1}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Irrational{:Ï€},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :y),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Union{Missing, Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Symbol,Int64,Symbol}}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,InvertedIndex{InvertedIndex{Int64}}})
        Base.precompile(Tuple{typeof(Base.to_index),GroupedDataFrame{DataFrame},Dict{Symbol,Missing}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},DataFrames.StackedVector{Union{Missing, Float64}},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(==),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Pair{Symbol,typeof(sum)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(names),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Any,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Int64,Int64}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(length),Symbol}},Vararg{Pair{Int64,Pair{typeof(length),Symbol}},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(length),Symbol}},Vararg{Pair{Int64,Pair{typeof(length),Symbol}},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{DataFrame,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :x1),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64},String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple{names,Tuple{Int64,Int64}} where names,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{DataFrame,1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.categorical!)),NamedTuple{(:compress,),Tuple{Bool}},typeof(categorical!),DataFrame,Array{String,1}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{String,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Tuple{Bool,Bool,Bool},Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{String,1},))
                end
            end
        Base.precompile(Tuple{typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.disallowmissing)),NamedTuple{(:error,),Tuple{Bool}},typeof(disallowmissing),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrame!),Tuple{Array{Int64,1},Array{Int64,1}},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}},Val{true}})
        Base.precompile(Tuple{Type{DataFrameRow},SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(identity)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{String,Symbol}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},Tuple{Int64,Int64,Int64},Function})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{String,Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Regex,InvertedIndex{Regex}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{_A,typeof(sum)} where _A,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Rational{Int64}},1}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},UnitRange{Int64},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:y, :x),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Array{Symbol,1},Base.RefValue{Bool},Any,AsTable,Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple{(:a, :b),Tuple{Int64,String}},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(view),DataFrameRow{DataFrame,DataFrames.Index},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Real},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Union{Missing, Float64},1},Array{Any,1}})
        Base.precompile(Tuple{Type{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{AsTable,Pair{ByRow{typeof(identity)},DataType}}})
        Base.precompile(Tuple{typeof(DataFrames.printtable),Base.GenericIOBuffer{Array{UInt8,1}},DataFrame})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(Statistics.mean),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1, :x2),Tuple{SubArray{Int64,1,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Int64,1,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Nothing,Val{true},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Regex})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Rational{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Rational{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{Int64,Missing}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,DataFrame,Array{Bool,1},Colon})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2),Tuple{Array{Union{Missing, Float64},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Function,DataFrame,Val{2}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(sum),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:x1,),Tuple{Array{Bool,1}}},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.var)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :v1, :v2),Tuple{Array{Union{Missing, Symbol},1},Array{Symbol,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{UInt64,1},Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,StepRange{Int64,Int64},Union{Function, Type},Tuple{Array{Union{Missing, UnitRange{Int64}},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(transform),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Any})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},Array{Complex{Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,Pair{typeof(sum),Symbol}},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{Type{DataFrame},Pair{String,Array{Any,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Missing, Float64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Float64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:b, :a),Tuple{Int64,Int64}},Int64,Colon})
        Base.precompile(Tuple{typeof(view),DataFrameRow{DataFrame,DataFrames.Index},All{Tuple{}}})
        Base.precompile(Tuple{typeof(promote_type),Type{GroupedDataFrame{DataFrame}},Type{Union{Missing, Nothing}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:y, :z),Tuple{Array{Float64,1},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Complex{Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Complex{Float64},Union{Function, Type},Tuple{Array{Complex{Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a, :c),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function, :y_function),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(Statistics.mean, (SubArray{DataFrame,1,Array{DataFrame,1},Tuple{Array{Int64,1}},false},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,typeof(Statistics.mean),SubArray{DataFrame,1,Array{DataFrame,1},Tuple{Array{Int64,1}},false},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Int64,Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Array{Any,1},1}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(Tables.schema),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce),Function,Function,Nothing,Nothing,Bool,Array{Real,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/html")},DataFrame})
        Base.precompile(Tuple{typeof(isequal),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(IteratorInterfaceExtensions.getiterator),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},UnitRange{Int64},All{Tuple{}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Symbol,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Symbol,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Colon})
        Base.precompile(Tuple{typeof(names),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},Function})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:function,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :ID2, :x_1),NTuple{5,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Array{Pair{String,Symbol},1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Any,1},Array{Int64,1}},Val{true},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Char,1},Array{Float64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames._vcat)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(DataFrames._vcat),Array{AbstractDataFrame,1}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Dict{Symbol,Any},1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        Base.precompile(Tuple{typeof(push!),DataFrame,Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :y, :x_sum),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{String,1},Array{String,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (String,String,Bool,Type{T} where T,typeof(stack),DataFrame,Array{String,1},Array{String,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Array{Float64,2},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Bool}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Float64}},Tuple{Array{Float64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :c),Tuple{UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x1_x2_cor),Tuple{Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:a, :b),Tuple{Int64,Int64}},Union{Function, Type},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :_left),Tuple{Array{Int64,1},Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat)),NamedTuple{(:inner, :outer),Tuple{Int64,Bool}},typeof(repeat),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,AsTable,typeof(sum)})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :y),Tuple{Int64,Int64}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.transform, (DataFrame,Any,Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,typeof(transform),DataFrame,Any,Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(exp)},Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,Pair{typeof(length),Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{Int64,2},Colon,All{Tuple{}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Rational{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,BigFloat,Union{Function, Type},Tuple{Array{BigInt,1}}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Pair{UInt8,Symbol}})
        isdefined(DataFrames, Symbol("#621#624")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#621#624")),Array{Union{Missing, Int64},1}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},Array{Int64,2},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Any,1}}})
        Base.precompile(Tuple{typeof(rename!),DataFrames.Index,Array{Pair{Symbol,Symbol},1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Symbol,Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,BitArray{1},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames.hashrows),Tuple{PooledArrays.PooledArray{Union{Missing, Int64},UInt8,1,Array{UInt8,1}}},Bool})
        Base.precompile(Tuple{Type{DataFrame},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Base.RefValue{NamedTuple{(:g,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}}}}},Type{Ref},GroupedDataFrame{DataFrame},NamedTuple{(:g,),Tuple{Array{Int64,1}}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Array{Float64,1},1}}},Tuple{Array{Array{Float64,1},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._gen_colnames),Any,Array{Symbol,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :makeunique, :copycols),Tuple{Int64,Bool,Bool}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{String,UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Pair{Colon,typeof(Statistics.cor)}})
        Base.precompile(Tuple{typeof(collect),Base.Generator{DataFrames.DataFrameColumns{DataFrame},typeof(minimum)}})
        Base.precompile(Tuple{typeof(==),DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Array{Any,1}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(groupindices),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :copycols),Tuple{Array{Int64,1},Array{Float64,1},Array{Union{Missing, Int64},1},Bool}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#136#137")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#136#137")),Array{NamedTuple{(),Tuple{}},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{CategoricalArrays.CategoricalValue{Int64,UInt32}}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{String,String,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper),DataFrame,SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Int64,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :indicator, :makeunique),Tuple{Symbol,Symbol,Bool}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g2, :x, :g1),Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{BigFloat,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{BigInt}},Tuple{Array{BigInt,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{BigInt,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol},typeof(nrow),Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,Base.Order.Perm{Base.Order.ForwardOrdering,Array{Float64,1}}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Cols{Tuple{}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},typeof(!),InvertedIndex{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.insertcols!)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Union{Function, Type},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(==),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(sort),DataFrame,Cols{Tuple{Colon}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1}},Val{true},Array{Int64,1},Bool,Bool})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Array{Int64,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Array{Int64,1},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(getindex),DataFrames.StackedVector{Union{Missing, Int64}},Function})
        Base.precompile(Tuple{typeof(flatten),DataFrame,InvertedIndex{Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2_left, :x_left, :ID2_right, :x_right),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.to_index),GroupedDataFrame{DataFrame},Tuple{Missing}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},Union{Function, Type},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1}},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{String,Array{String,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{Union,1},Array{Symbol,1},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Float64,Function,GroupedDataFrame{DataFrame},Nothing})
        isdefined(DataFrames, Symbol("#67#74")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#67#74")),Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :e),Tuple{Array{Char,1},Array{Float64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :v1, :v2),Tuple{Array{Symbol,1},Array{Symbol,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Any,1},Union{Function, Type},Tuple{}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames._combine_prepare)),NamedTuple{(:copycols, :keepkeys, :ungroup, :keeprows, :renamecols),NTuple{5,Bool}},typeof(DataFrames._combine_prepare),GroupedDataFrame{DataFrame},Colon,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :fid),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.collect_similar),DataFrames.DataFrameRows{DataFrame,DataFrames.Index},Base.Generator{DataFrames.DataFrameRows{DataFrame,DataFrames.Index},typeof(sum)}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Type{SubDataFrame},SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Colon,Cols{Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Regex,InvertedIndex{Regex}}}})
        Base.precompile(Tuple{typeof(repr),MIME{Symbol("text/latex")},DataFrames.DataFrameColumns{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :Job),Tuple{Float64,String,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :c),Tuple{Int64,Int64}},Int64,Colon})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(Statistics.var),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair),Pair,Bool,DataFrame,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat!)),NamedTuple{(:inner, :outer),Tuple{Bool,Int64}},typeof(repeat!),DataFrame})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Int64,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataAPI.levels),DataFrames.RepeatedVector{String}})
        Base.precompile(Tuple{typeof(convert),Type{DataFrame},Array{Union{Missing, Float64},2}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(first),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(copyto!),CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},DataFrames.RepeatedVector{CategoricalArrays.CategoricalValue{String,UInt32}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Real,1}},Val{false},Array{Int64,1}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Dict{String,Int64},UnitRange{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{BigInt,1},Colon})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._unstack),DataFrame,Array{Int64,1},Int64,GroupedDataFrame{DataFrame},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},GroupedDataFrame{DataFrame},Function,Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(iterate),Base.Iterators.Zip{Tuple{DataFrames.StackedVector{Float64},DataFrames.StackedVector{Float64}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{String,1}},Tuple{Array{Int64,1},Array{String,1}}})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},UnitRange{Int64},Colon,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Symbol}},typeof(innerjoin),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},DataFrame})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(view),DataFrame,Function,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{Int64,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{typeof(nrow),1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},MIME{Symbol("text/plain")},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},NTuple{5,Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{DataFrame,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :g_function),Tuple{UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, DataFrame},1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{UnitRange{Int64}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64,Int64,Int64},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Type{DataFrame},Dict{String,Any}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},DataFrame}},Array{Float64,2}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,DataFrame,InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{typeof(==),Array{String,1},DataFrames.RepeatedVector{String}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,Symbol},1}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Number},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{String,Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(sin),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,DataFrame}}}}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Union{Missing, Int64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rename!)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(rename!),DataFrames.Index,Array{Symbol,1}})
        let fbody = try __lookup_kwbody__(which(DataFrames.select, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,Bool,typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Vararg{Any,N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,AsTable,ByRow{typeof(identity)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{Symbol,1},typeof(+)}})
        Base.precompile(Tuple{typeof(stack),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,UnitRange{Int64},Colon})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Array{Int64,2},InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{DataFrames.RepeatedVector{Union{Missing, Int64}},DataFrames.RepeatedVector{Union{Missing, Int64}},DataFrames.RepeatedVector{Union{Missing, String}},Array{Union{Missing, Int64},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{String,typeof(sum)},1}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Function,Regex})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{Int64,1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{Pair},Tuple{Array{String,1},Base.RefValue{ByRow{typeof(-)}}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(+),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Int64})
        Base.precompile(Tuple{Type{DataFrame},Array{Pair{String,Array{Int64,1}},1}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Colon,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Colon,Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,UnitRange{Int64}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Type{T} where T,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Tuple{Int64,Int64},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Function})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},UnitRange{Int64}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Int64},1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},MIME{Symbol("text/latex")},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, UnitRange{Int64}},1}},Int64})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Complex{Float64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, String},1},Array{String,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Irrational{:Ï€},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:keepkeys, :ungroup),Tuple{Bool,Bool}},typeof(transform),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :v1),Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Int64,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames.group_rows),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Complex{Float64},Union{Function, Type},Tuple{Array{Complex{Float64},1}}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Tuple{Int64,Char}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Base.RefValue{Int64},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.Index,UnitRange{BigInt}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x1,),Tuple{Array{Any,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),DataFrame,Function,Symbol,Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Complex{Float64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{typeof(select!),GroupedDataFrame{DataFrame},Pair{Symbol,Symbol}})
        Base.precompile(Tuple{typeof(stack),DataFrame,Regex})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_append!),Bool,Array{String,1},Array{Missing,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}},Array{typeof(nrow),1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :y),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C, :D, :E, :F),NTuple{6,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(identity),Tuple{DataFrame}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_mean),Tuple{UnitRange{Int64},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Bool,Union{Function, Type},Tuple{Array{Bool,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{Symbol,Any}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}},Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :bin),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.transform)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(transform),DataFrame,Pair{Symbol,typeof(first)}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Pair{Symbol,Pair{typeof(prod),Symbol}}})
        Base.precompile(Tuple{typeof(names),DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{}}})
        Base.precompile(Tuple{typeof(rename!),DataFrame,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Symbol},1},Array{Symbol,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.leftjoin)),NamedTuple{(:on,),Tuple{String}},typeof(leftjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(permutedims),DataFrame,Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Any,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,typeof(combine),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Any,))
                end
            end
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(filter),Function,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Array{Any,1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Nothing,1},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(coalesce),Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing},Tuple{Bool},Tuple{Int64}},Base.RefValue{Nothing}}},Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64,All{Tuple{}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Rational{Int64},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :y),Tuple{Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Complex{Float64}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},UnitRange{Bool}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c_function,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(setindex!),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},DataFrame,Colon,All{Tuple{}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Dict{Symbol,Missing},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{Dict},Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{Int64,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(sort),DataFrame,Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Array{Int64,2}})
        Base.precompile(Tuple{typeof(unstack),DataFrame,Symbol,Symbol,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,String}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(+),Tuple{SubArray{Float64,0,Array{Float64,1},Tuple{Int64},true},Array{Float64,1}}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,DataFrame}}}}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),DataFrame,AsTable,ByRow{typeof(first)}})
        Base.precompile(Tuple{typeof(DataFrames.escapedprint),Base.GenericIOBuffer{Array{UInt8,1}},DataFrames.DataFrameRows{DataFrame,DataFrames.Index},String})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1, :x2),Tuple{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{true},Nothing})
        Base.precompile(Tuple{typeof(show),GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Colon,Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.make_unique)),NamedTuple{(:makeunique,),Tuple{Bool}},typeof(DataFrames.make_unique),Array{Symbol,1}})
        Base.precompile(Tuple{typeof(Tables.columntable),Tables.Schema{(),Tuple{}},DataFrame})
        Base.precompile(Tuple{typeof(reduce),typeof(vcat),Array{DataFrame,1}})
        isdefined(DataFrames, Symbol("#ft_float#558")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#ft_float#558")),Markdown.MD,Int64,Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:c,),Tuple{Float64}},Tuple{Array{Float64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :y),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Array{String,1},typeof(identity)},Bool})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Union{Missing, Real},1}})
        Base.precompile(Tuple{typeof(view),DataFrameRow{DataFrame,DataFrames.Index},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{String}},Tuple{Array{Union{Nothing, String},1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,InvertedIndex{Symbol}})
        Base.precompile(Tuple{typeof(view),DataFrame,Int64,All{Tuple{}}})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},Tuple{Int64,Int64},InvertedIndex{Int64}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Missing,Union{Function, Type},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Union{Nothing, String},1},Array{Union{Nothing, String},1},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},Array{Union{Nothing, Int64},1},Array{Union{Nothing, Int64},1},Array{String,1},Array{Union{Nothing, String},1},Array{Union{Nothing, String},1},Array{Int64,1},Array{Union{Nothing, Int64},1},Array{Union{Nothing, Int64},1},Array{Bool,1},Array{Union{Nothing, Bool},1},Array{Union{Nothing, Bool},1},Array{Float64,1},Array{Union{Nothing, Float64},1},Array{Union{Nothing, Float64},1},Array{String,1},Array{Union{Nothing, String},1},Array{Union{Nothing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:c_sum,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(flatten),DataFrame,String})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Number,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Int64})
        Base.precompile(Tuple{typeof(names),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},Regex})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Any})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{CategoricalArrays.CategoricalValue{Int64,UInt32}}},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(isequal),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:ID, :Name, :Job),Tuple{Missing,String,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Union{Missing, Int64},1,Array{Union{Missing, Int64},1},Tuple{Base.OneTo{Int64}},true}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(names),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},InvertedIndex{Symbol}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, UInt8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Symbol,typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Tuple{Array{Int64,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{Tuple{Int64,Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Array{Union{Missing, String},1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{T,1} where T,1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._filter_helper),Function,Array{Int64,1},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Array{typeof(nrow),1},Bool})
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},Tuple{Int64,Int64,Int64},InvertedIndex{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Symbol,Pair{Symbol,Pair{typeof(identity),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Number},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x2_identity,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Tuple{Float64,Float64},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1},Array{Float64,1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x_function,),Tuple{Array{DataFrameRow{DataFrame,DataFrames.Index},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._transformation_helper),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},UnitRange{Int64},Function})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Tuple{Array{String,1},Array{Char,1},Array{Int64,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Pair{String,String}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{String,Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, UInt8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:z,),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Any,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},typeof(nrow),typeof(nrow)})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{27,SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,Nothing,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1}},Tuple{Array{Union{Missing, Symbol},1},Array{Union{Missing, Symbol},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Symbol,1}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Int64,1},Array{Char,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{Missing}},Tuple{Array{Missing,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NamedTuple{(:y,),Tuple{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Missing}}}})
        Base.precompile(Tuple{typeof(unstack),DataFrame,Symbol,Symbol})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering},Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :id1_1, :x_right),NTuple{4,UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,1},Union{Function, Type},Tuple{Array{Float64,1}}})
        Base.precompile(Tuple{Type{DataFrame},Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right, :ind),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Union{Missing, BigInt},1},Colon})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,DataFrame,Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :v1),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Symbol},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Union{Missing, Float64},1},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(),Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#627#628")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#627#628")),Array{Union{Missing, String},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :_right),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(copy),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Int64,DataFrame})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :ID2, :x_1),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},typeof(!),UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{Union{Missing, String},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols, :renamecols),Tuple{Bool,Bool}},typeof(select),GroupedDataFrame{DataFrame},Function,Pair{Symbol,Pair{typeof(first),Symbol}},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Real,1}}})
        Base.precompile(Tuple{typeof(DataFrames._filter!_helper),DataFrame,typeof(!=),Array{String,1},Vararg{Array{String,1},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{String,1,PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        let fbody = try __lookup_kwbody__(which(sortperm, (DataFrame,Array{Symbol,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),DataFrame,Array{Symbol,1},))
                end
            end
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{typeof(nrow),Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d),Tuple{Array{String,1},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Array{Float64,1},CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Dict{Symbol,Int64},1}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(combine),Function,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{String,1}}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Array{Int64,1},Bool,Type{AsTable}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(setproperty!),DataFrame,Symbol,PooledArrays.PooledArray{Char,UInt8,1,Array{UInt8,1}}})
        isdefined(DataFrames, Symbol("#395#396")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#395#396")),Pair{Colon,typeof(Statistics.cor)}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.mean),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce),Function,Function,Nothing,Nothing,Bool,Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x),Tuple{Int64,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(nonunique),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Array{Float64,2},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)},Symbol})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Base.OneTo{Int64}},Function,Array{Int64,1}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,typeof(/)},Array{BigInt,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.setindex_widen_up_to),Array{DataFrames.RepeatedVector{Int64},1},DataFrames.RepeatedVector{String},Int64})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,Int64,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:a, :b),Tuple{UnitRange{Int64},UnitRange{Int64}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Int64,Pair{Symbol,Array{Array{Int64,1},1}}})
        let fbody = try __lookup_kwbody__(which(DataFrames._stackview, (DataFrame,Array{Int64,1},Array{Int64,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Type{T} where T,typeof(DataFrames._stackview),DataFrame,Array{Int64,1},Array{Int64,1},))
                end
            end
        Base.precompile(Tuple{typeof(setindex!),DataFrameRow{DataFrame,DataFrames.Index},NamedTuple{(:a, :c),Tuple{Int64,Int64}},InvertedIndex{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:z, :a),Tuple{Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Complex{Float64},1}}})
        Base.precompile(Tuple{typeof(describe),DataFrame})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Symbol,Float64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :a, :b),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Array{Pair{typeof(nrow),Symbol},1}})
        Base.precompile(Tuple{typeof(map),Function,GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Array{Array{Int64,1},1},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :id2, :variable, :value),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{String,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),Type{Ref},Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},NamedTuple{(:g,),Tuple{Array{Int64,1}}},Int64})
        Base.precompile(Tuple{typeof(hcat),DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,Array{Symbol,1},InvertedIndex{Array{Symbol,1}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,Array{Symbol,1},InvertedIndex{Array{Symbol,1}},))
                end
            end
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Complex{Float64}},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Symbol,Pair{Symbol,typeof(first)}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :renamecols, :indicator),Tuple{Array{Any,1},Pair{String,String},Symbol}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :_left),Tuple{Int64,String}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,NamedTuple{(:z,),Tuple{Int64}},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,2},SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{String,1}},Int64})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std),Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x1_last, :x2_last, :x3_last, :x4_last),Tuple{Array{Int64,1},Int64,Int64,Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},InvertedIndex{UnitRange{Bool}}})
        Base.precompile(Tuple{Type{DataFrameRow},DataFrame,Int64,Function})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Tuple{Symbol},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        isdefined(DataFrames, Symbol("#627#628")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#627#628")),SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Base.OneTo{Int64}},true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2_left, :x_left, :ID2_right, :x_right),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.collect_similar),DataFrames.DataFrameRows{DataFrame,DataFrames.Index},Base.Generator{DataFrames.DataFrameRows{DataFrame,DataFrames.Index},Type{Array{T,1} where T}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}},Pair{Symbol,Pair{typeof(length),Symbol}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{BigFloat}},Tuple{Array{BigFloat,1}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{BigInt,1}},Tuple{Symbol},Val{false}})
        let fbody = try __lookup_kwbody__(which(issorted, (DataFrame,Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,Function,Bool,Base.Order.ForwardOrdering,typeof(issorted),DataFrame,Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(append!),Array{Any,1},Array{Pair{String,ByRow{typeof(-)}},1}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Array{Int64,1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},InvertedIndex{Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N})
        Base.precompile(Tuple{typeof(==),DataFrames.DataFrameRows{SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},DataFrames.DataFrameRows{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x2,),Tuple{Array{Bool,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Int64,typeof(sum)}})
        Base.precompile(Tuple{typeof(allowmissing!),DataFrame,InvertedIndex{InvertedIndex{Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Int64,0,Array{Int64,1},Tuple{Int64},true}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,NTuple{4,Array{Float64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3, :nrow, :x4),Tuple{Float64,Array{Float64,1},Float64,Int64,Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :c),Tuple{Array{Missing,1},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(transform!),DataFrame,Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Array{Any,1},Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Union{Missing, Rational{Int64}},1}}})
        Base.precompile(Tuple{typeof(view),DataFrame,Int64,Between{Int64,Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x1),Tuple{Array{Int64,1},Array{Tuple{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Nothing,1},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(coalesce),Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Bool},Tuple{Int64}},Base.RefValue{Nothing}}},Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1_last, :x2_last, :x3_last, :x4_last, :x1),Tuple{Int64,Int64,Int64,Int64,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),DataFrameRow{DataFrame,DataFrames.Index},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64,Int64},1}}},Tuple{Array{Tuple{Int64,Int64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Real,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{NamedTuple},Tuple{Array{DataFrames.GroupKey{GroupedDataFrame{DataFrame}},1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{AsTable,Pair{typeof(identity),DataType}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1}},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x,),Tuple{CategoricalArrays.CategoricalValue{String,UInt32}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(map),Type{T} where T,DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Pair{AsTable,Pair{typeof(identity),DataType}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Pair{Symbol,Array{Int64,1}},Pair{Symbol,Array{Float64,1}}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,Type{Integer}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Array{NamedTuple{(:x, :y),Tuple{Int64,Int64}},1},1},Union{Function, Type},NamedTuple{(:x, :y),Tuple{Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(nonunique),DataFrame,Function})
        let fbody = try __lookup_kwbody__(which(isapprox, (DataFrame,DataFrame,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Int64,Float64,Bool,Function,typeof(isapprox),DataFrame,DataFrame,))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,DataFrame,Union{Function, Type},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Tuple{Int64,Int64,Int64},1}}},Tuple{Array{Tuple{Int64,Int64,Int64},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(Base.Broadcast.dotview),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},UnitRange{Int64},UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Array{Int64,1},1}}},Tuple{Array{Array{Int64,1},1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:C, :B, :A),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(hcat),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(filter),Function,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.ourshow),Base.GenericIOBuffer{Array{UInt8,1}},Int32,Int64})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(getindex),DataFrames.RepeatedVector{String},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Int64,1},Array{Union{Missing, Int64, Int8},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),Tuple{SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Number},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Float64,1},Array{Number,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:c,),Tuple{Array{Float64,1}}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Missing, Bool},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1_first, :x2_first, :x3_first, :x4_first),Tuple{Int64,Int64,Missing,Missing}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, String},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},NTuple{5,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Regex,Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{Symbol,Symbol}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{UnitRange{Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(describe),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._copyto_helper!),SubArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}},true},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(identity),Tuple{Base.Broadcast.Extruded{Base.ReshapedArray{Char,2,StepRange{Char,Int64},Tuple{}},Tuple{Bool,Bool},Tuple{Int64,Int64}}}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{String,String},1}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y),Tuple{Array{Union{Missing, Int64},1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{String,1}},Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :p, :q, :r),NTuple{4,Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{NamedTuple{(:c_sum,),Tuple{Int64}},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Float64,1}},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{BigInt,1},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Rational{Int64},Union{Function, Type},Tuple{Array{Rational{Int64},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x, :y, :x_sum),Tuple{Array{Union{Missing, Int64},1},Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Cols{Tuple{Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrame!),Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,Array{Float64,1}},Vararg{Pair{Symbol,Array{Float64,1}},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Array{Base.Order.Ordering,1},Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, BigFloat},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),Array{Float64,2},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{String,Symbol}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{StepRange{Int64,Int64}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(insertcols!),DataFrame,Pair{Symbol,String},Pair{Symbol,UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Tuple{Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{typeof(vcat),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.innerjoin)),NamedTuple{(:on,),Tuple{Pair{Symbol,Symbol}}},typeof(innerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Int64,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,BitArray{1},Symbol})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,Pair{typeof(sum),Symbol}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Union{Irrational{:Ï€}, Missing},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(push!),DataFrame,Dict{Symbol,String}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,BigFloat,Union{Function, Type},Tuple{Array{Union{Missing, BigFloat},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:B, :A),Tuple{UnitRange{Int64},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1,),Tuple{Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,DataFrame}},Array{Float64,2}}},Int64}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{Array{Float64,3},DataFrame}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:p, :q),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false}}},Tuple{Array{Int64,1},Array{Int64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol,Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},NTuple{4,Array{Int64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{Array{String,1}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}},Val{true}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Bool,1}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var),Nothing},Array{Number,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.copyto_widen!),Array{Nothing,1},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(coalesce),Tuple{Base.Broadcast.Extruded{Array{Union{Missing, Bool},1},Tuple{Bool},Tuple{Int64}},Base.RefValue{Nothing}}},Int64,Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :z),Tuple{Array{Any,1},UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b, :d),Tuple{Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :x1),Tuple{Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, Real},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(:x,),Tuple{Array{Int64,1}}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.repeat)),NamedTuple{(:inner, :outer),Tuple{Int64,Int64}},typeof(repeat),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.combine)),NamedTuple{(:ungroup,),Tuple{Bool}},typeof(combine),GroupedDataFrame{DataFrame},Pair{Array{Symbol,1},typeof(identity)}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(sum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}},Int64})
        Base.precompile(Tuple{typeof(stack),DataFrame,Array{Symbol,1},Array{Any,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_astable),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Type{AsTable},Bool,Array{Dict{Symbol,Int64},1},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64})
        let fbody = try __lookup_kwbody__(which(DataFrames.stack, (DataFrame,InvertedIndex{Array{Int64,1}},InvertedIndex{InvertedIndex{Array{Int64,1}}},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Symbol,Symbol,Bool,Type{T} where T,typeof(stack),DataFrame,InvertedIndex{Array{Int64,1}},InvertedIndex{InvertedIndex{Array{Int64,1}}},))
                end
            end
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,Cols{Tuple{Int64,String}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Bool},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c, :d),Tuple{Array{String,1},Array{Any,1},Array{Int64,1},Array{Bool,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Complex{Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Complex{Int64},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Int64},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.reduce)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(reduce),typeof(vcat),NTuple{10,DataFrame}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Real},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrameRow{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}}},Array{Bool,1}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},Int64,Colon})
        Base.precompile(Tuple{typeof(isapprox),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Missing, Complex{Float64}},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x_left, :x_right),Tuple{Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{DataFrames.Aggregate{typeof(first),Nothing},Array{Complex{Int64},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(==),DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{Type{DataFrame},Dict{String,UnitRange{Int64}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Regex})
        Base.precompile(Tuple{typeof(names),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Tuple{Int64},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},Tuple{},Val{false},Nothing})
        Base.precompile(Tuple{typeof(DataFrame!),Pair{String,Array{Int64,1}},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Array{String,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,Symbol}}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{BigFloat,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Float64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1},Array{Float64,1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C, :D, :E, :F, :G),Tuple{Array{Int64,1},Array{String,1},Array{String,1},Array{Union{Missing, Float64},1},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1},Array{Markdown.MD,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Float64,1}},Val{false},Nothing})
        Base.precompile(Tuple{typeof(view),DataFrame,UnitRange{BigInt},Colon})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod),Nothing,Nothing},Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.sort)),NamedTuple{(:view,),Tuple{Bool}},typeof(sort),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Int64}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Symbol,Int64,Symbol}}})
        Base.precompile(Tuple{typeof(select),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Any,Any,Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :c),Tuple{Array{Union{Missing, Symbol},1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(prod),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Bool,Union{Function, Type},Tuple{Array{Union{Missing, Bool},1}}})
        Base.precompile(Tuple{typeof(sort),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :x, :y, :z),NTuple{4,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{Int64, DataFrames.GroupKey{GroupedDataFrame{DataFrame}}},1}})
        Base.precompile(Tuple{typeof(completecases),DataFrame,UnitRange{Int64}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Array{Int64,1},typeof(+)}})
        Base.precompile(Tuple{typeof(rename),DataFrame,Dict{Int64,Symbol}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.describe)),NamedTuple{(:cols,),Tuple{InvertedIndex{Int64}}},typeof(describe),DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Array{Int64,1}},Array{typeof(nrow),1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),NamedTuple{(:x2,),Tuple{Array{Float64,1}}},Tuple{Array{Float64,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Nothing,Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:renamecols,),Tuple{Bool}},typeof(select),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(+)},Pair{Array{Symbol,1},typeof(+)},Vararg{Any,N} where N})
        Base.precompile(Tuple{typeof(getindex),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},typeof(!),All{Tuple{}}})
        let fbody = try __lookup_kwbody__(which(sortperm, (SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Nothing,Function,Function,Bool,Base.Order.ForwardOrdering,typeof(sortperm),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_tables_with_first!),DataFrame,Tuple{Array{Bool,1}},Array{Int64,1},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{Array{Bool,1}},Tuple{Symbol},Val{true}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},NTuple{4,Array{Int64,1}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{Symbol,1},Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B, :C),Tuple{Array{Int64,1},Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:b,),Tuple{Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(haskey),GroupedDataFrame{DataFrame},NamedTuple{(:a, :c),Tuple{Int64,Int64}}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(sum)}})
        Base.precompile(Tuple{typeof(view),DataFrame,Array{Union{Missing, Integer},1},Colon})
        Base.precompile(Tuple{typeof(categorical),DataFrame,String})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :y, :z),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1},Array{Missing,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},NamedTuple{(:a, :b),Tuple{Symbol,Symbol}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}},Array{Union{Missing, UInt64},1},Colon})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:copycols,),Tuple{Bool}},Type{DataFrame},Tuple{Array{Int64,1},Array{Int64,1}},Tuple{String,String}})
        Base.precompile(Tuple{typeof(push!),DataFrame,DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g1, :x1, :g2, :x2, :y),Tuple{Array{Int64,1},UnitRange{Int64},Array{Int64,1},UnitRange{Int64},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}},Array{Int64,2}})
        Base.precompile(Tuple{typeof(getindex),DataFrames.RepeatedVector{String},Float64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x, :x1, :x2),Tuple{UnitRange{Int64},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Array{Float64,2}},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on, :indicator, :makeunique),Tuple{Symbol,String,Bool}},typeof(outerjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Int64,1},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:y_function, :x_sum),Tuple{Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Int64,1},Union{Function, Type},NamedTuple{(),Tuple{}}})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum),Nothing,Nothing},Array{Union{Missing, Int64, Int8},1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Int64},1}}}})
        Base.precompile(Tuple{typeof(dropmissing),DataFrame,Array{Bool,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Array{Float64,2},Union{Function, Type},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false},SubArray{String,1,Array{String,1},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :a),Tuple{Array{Char,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{ByRow{typeof(-)},SubArray{Int64,1,Array{Int64,1},Tuple{Base.OneTo{Int64}},true}})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{Union{Irrational{:Ï€}, Missing},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:p, :q),Tuple{Array{Int64,1},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Int64,1},Array{Markdown.MD,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(view),DataFrame,Function,Between{Int64,Int64}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Between{Symbol,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Between{Symbol,Symbol},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(getindex),DataFrame,InvertedIndex{Int64},Between{Int64,Int64}})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},Base.OneTo{Int64}}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(floor),Tuple{Base.RefValue{Type{Int64}},Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(/),Tuple{DataFrame,Tuple{Int64}}}}}})
        Base.precompile(Tuple{typeof(convert),Type{Tuple},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:a, :b),Tuple{Int64,Int64}},Union{Function, Type},Tuple{Array{Union{Missing, NamedTuple{(:a, :b),Tuple{Int64,Int64}}},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a,),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{String,1},Colon,Symbol})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id1, :id2, :x, :x_1),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :a, :b),Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(*),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}}})
        Base.precompile(Tuple{typeof(DataFrames.genkeymap),GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Symbol},1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Array{Int64,1},Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Missing}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, Real},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :X),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{CategoricalArrays.CategoricalValue{String,UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,typeof(!),InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Int64,UnitRange{Int64}})
        Base.precompile(Tuple{Type{DataFrame},Pair{Symbol,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:v1, :v2, :v3),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Array{Int64,1},Symbol,Bool,BigInt,Union{Function, Type},Tuple{Array{BigInt,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Key3, :Value),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Array{String,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x_sum_skipmissing),Tuple{UnitRange{Int64},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :y),Tuple{Array{Int64,1},Array{Int64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x1, :x2, :x3, :nrow, :x4),Tuple{Float64,SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Float64,Int64,Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(==),Array{DataFrameRow{DataFrame,DataFrames.Index},1},Array{DataFrameRow{DataFrame,DataFrames.Index},1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Int64,Union{Function, Type},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}}})
        Base.precompile(Tuple{typeof(DataFrames.groupreduce_init),typeof(max),Function,Nothing,Array{Int64,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._add_multicol_res),NamedTuple{(:b,),Tuple{Int64}},DataFrame,DataFrame,Array{Symbol,1},Base.RefValue{Bool},Any,Nothing,Bool,Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:z,),Tuple{UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{StepRange{Int64,Int64}}},Function,GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.push!)),NamedTuple{(:cols,),Tuple{Symbol}},typeof(push!),DataFrame,NamedTuple{(:a, :b, :c, :d),NTuple{4,Int64}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Union{Int64, Int8},1}},Val{false},Array{Int64,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b),Tuple{Array{Any,1},Array{Union{Missing, Int64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},Array{Int64,1}},Pair{AsTable,typeof(identity)}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Symbol,Symbol,Int64}}})
        isdefined(DataFrames, Symbol("#128#132")) && Base.precompile(Tuple{getfield(DataFrames, Symbol("#128#132")),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,Array{Int64,1},Array{Int64,1}},UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(view),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},typeof(!),All{Tuple{}}})
        Base.precompile(Tuple{typeof(repr),MIME{Symbol("text/html")},DataFrame})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{Any,1},1},Array{Symbol,1}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(Statistics.var),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{UnitRange{Int64},1}},Int64})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:a, :b, :e),Tuple{Array{Any,1},Array{Any,1},Array{Any,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),DataFrame,Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Symbol,typeof(first)}})
        Base.precompile(Tuple{typeof(Base.collect_similar),DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},Base.Generator{DataFrames.GroupKeys{GroupedDataFrame{DataFrame}},typeof(repr)}})
        Base.precompile(Tuple{typeof(setindex!),DataFrame,Array{DataType,1},typeof(!),Symbol})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}}}},Int64})
        Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,DataFrame,Array{Float64,2}})
        Base.precompile(Tuple{typeof(mapcols),typeof(categorical),DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Nothing,Tuple{Array{Union{Missing, String},1}},Tuple{Array{String,1}}})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,Float64,Union{Function, Type},Tuple{Array{Irrational{:Ï€},1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.semijoin)),NamedTuple{(:on,),Tuple{Array{String,1}}},typeof(semijoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},DataFrameRow{DataFrame,DataFrames.Index}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}},CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:A, :B),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, Float64},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),DataFrame,Colon,All{Tuple{Symbol,Symbol}}})
        Base.precompile(Tuple{Type{DataFrame},Array{Array{String,1},1},Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Key1, :Key2, :Value),Tuple{Array{Union{Missing, String},1},PooledArrays.PooledArray{String,UInt8,1,Array{UInt8,1}},UnitRange{Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{ByRow{typeof(minmax)},SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},Vararg{SubArray{Float64,1,Array{Float64,1},Tuple{Array{Int64,1}},false},N} where N})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Symbol})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{Array{Int64,1},1}})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(columnindex),Tuple{Base.RefValue{SubDataFrame{DataFrame,DataFrames.Index,UnitRange{Int64}}},Array{Symbol,1}}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:_left,),Tuple{Int64}},Type{DataFrame}})
        Base.precompile(Tuple{ByRow{typeof(/)},SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},Vararg{SubArray{Int64,1,Array{Int64,1},Tuple{Array{Int64,1}},false},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        let fbody = try __lookup_kwbody__(which(issorted, (DataFrame,Array{Any,1},))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Function,Function,Tuple{Bool,Bool,Bool},Base.Order.ForwardOrdering,typeof(issorted),DataFrame,Array{Any,1},))
                end
            end
        Base.precompile(Tuple{typeof(DataFrames._combine_rows_with_first!),NamedTuple{(:x1,),Tuple{CategoricalArrays.CategoricalValue{Int64,UInt32}}},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Int64,Int64,Function,GroupedDataFrame{DataFrame},Tuple{CategoricalArrays.CategoricalArray{Int64,1,UInt32,Int64,CategoricalArrays.CategoricalValue{Int64,UInt32},Union{}}},Tuple{Symbol},Val{false}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:Name, :Quantity, :Mass),Tuple{Array{String,1},Array{Int64,1},Array{Float64,1}}},Type{DataFrame}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.outerjoin)),NamedTuple{(:on,),Tuple{Array{Pair{Symbol,String},1}}},typeof(outerjoin),DataFrame,DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(view),DataFrame,InvertedIndex{Int64},All{Tuple{}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:p, :a, :b, :c, :q),Tuple{StepRange{Char,Int64},UnitRange{Int64},Array{Int64,1},Array{Int64,1},StepRange{Char,Int64}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Union{Missing, DataFrame},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(maximum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1}},Int64})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x,),Tuple{String}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(DataFrames._combine_process_pair_symbol),Bool,GroupedDataFrame{DataFrame},Dict{Symbol,Tuple{Bool,Int64}},Array{DataFrames.TransformationResult,1},Nothing,Symbol,Bool,NamedTuple{(:c,),Tuple{Float64}},Union{Function, Type},Tuple{Array{Int64,1},Array{Float64,1}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:z, :nrow, :z2),Tuple{Int64,Int64,Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical!),DataFrame,InvertedIndex{UnitRange{Int64}}})
        Base.precompile(Tuple{typeof(DataFrames.update_row_maps!),DataFrame,DataFrame,DataFrames.RowGroupDict{DataFrame},DataFrames.RowIndexMap,DataFrames.RowIndexMap,DataFrames.RowIndexMap,Array{Bool,1},Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}},Tuple{CategoricalArrays.CategoricalArray{Float64,1,UInt32,Float64,CategoricalArrays.CategoricalValue{Float64,UInt32},Union{}}}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:a, :b),Tuple{Int64,String}},Function,GroupedDataFrame{DataFrame},Nothing})
        Base.precompile(Tuple{typeof(combine),GroupedDataFrame{DataFrame},Colon,Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},Vararg{Pair{Symbol,Pair{ByRow{typeof(sin)},Symbol}},N} where N})
        Base.precompile(Tuple{typeof(DataFrames._expand_to_table),Array{NamedTuple{(:a, :b, :c),Tuple{Int64,Int64,Int64}},1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Bool,1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(categorical),DataFrame,Array{Bool,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),DataFrame,Pair{Symbol,Array{Symbol,1}},Function})
        Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle,Nothing,typeof(+),Tuple{DataFrame,Base.ReshapedArray{Int64,2,Base.OneTo{Int64},Tuple{}}}}})
        Base.precompile(Tuple{typeof(transform),SubDataFrame{DataFrame,DataFrames.Index,Base.OneTo{Int64}},Any})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:x12345678901234567890,),Tuple{String}},Type{DataFrame}})
        let fbody = try __lookup_kwbody__(which(DataFrames.combine, (GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))) catch missing end
                if !ismissing(fbody)
                    Base.precompile(fbody, (Bool,Bool,Bool,typeof(combine),GroupedDataFrame{DataFrame},Pair{Symbol,typeof(Statistics.mean)},Vararg{Union{Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair, AbstractArray{T,1} where T, Type, All, Between, Cols, InvertedIndex},N} where N,))
                end
            end
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Dict{Any,Any}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.select)),NamedTuple{(:copycols,),Tuple{Bool}},typeof(select),DataFrame,Function})
        Base.precompile(Tuple{typeof(DataFrames._sortperm),SubDataFrame{DataFrame,DataFrames.Index,Array{Int64,1}},Base.Sort.MergeSortAlg,DataFrames.DFPerm{Base.Order.ForwardOrdering,Tuple{SubArray{Union{Missing, CategoricalArrays.CategoricalValue{String,UInt32}},1,CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,Array{Union{Missing, String},1},Tuple{Array{Int64,1}},false},SubArray{Union{Missing, String},1,PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}},Tuple{Array{Int64,1}},false}}}})
        Base.precompile(Tuple{typeof(Base.vect),DataFrames.UserColOrdering{Symbol},Vararg{Any,N} where N})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:g, :x),Tuple{Array{Int64,1},Array{Union{Missing, BigFloat},1}}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(getindex),GroupedDataFrame{DataFrame},Array{Union{Tuple{Symbol,Int64}, DataFrames.GroupKey{GroupedDataFrame{DataFrame}}},1}})
        Base.precompile(Tuple{Type{DataFrame},BitArray{2},Array{String,1}})
        Base.precompile(Tuple{typeof(DataFrames._combine_multicol),NamedTuple{(:x, :y),Tuple{Array{Int64,1},Int64}},Function,GroupedDataFrame{DataFrame},Tuple{Array{Int64,1}}})
        Base.precompile(Tuple{typeof(DataFrames.get_stats),Array{String,1},Array{Symbol,1}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.manipulate)),NamedTuple{(:copycols, :keeprows, :renamecols),Tuple{Bool,Bool,Bool}},typeof(DataFrames.manipulate),SubDataFrame{DataFrame,DataFrames.SubIndex{DataFrames.Index,UnitRange{Int64},UnitRange{Int64}},UnitRange{Int64}},Pair{UnitRange{Int64},ByRow{typeof(+)}}})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.rightjoin)),NamedTuple{(:on, :makeunique, :validate, :renamecols),Tuple{Symbol,Bool,Pair{Bool,Bool},Pair{Symbol,String}}},typeof(rightjoin),DataFrame,DataFrame})
        Base.precompile(Tuple{typeof(DataFrames.normalize_selection),DataFrames.Index,Pair{Regex,typeof(Statistics.cor)},Bool})
        Base.precompile(Tuple{DataFrames.Reduce{typeof(max),Nothing,Nothing},Array{BigFloat,1},GroupedDataFrame{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames._combine_with_first),NamedTuple{(:x1,),Tuple{Array{Int64,1}}},Function,GroupedDataFrame{DataFrame},NamedTuple{(),Tuple{}},Val{false},Nothing})
        Base.precompile(Tuple{Core.kwftype(typeof(DataFrames.Type)),NamedTuple{(:id, :p),Tuple{Array{Int64,1},Int64}},Type{DataFrame}})
        Base.precompile(Tuple{typeof(DataFrames.row_group_slots),Tuple{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalValue{String,UInt32},Missing},PooledArrays.PooledArray{Union{Missing, String},UInt8,1,Array{UInt8,1}}},Val{false},Array{Int64,1},Bool,Bool})
        Base.precompile(Tuple{typeof(DataFrames.do_call),typeof(minimum),Array{Int64,1},Array{Int64,1},Array{Int64,1},GroupedDataFrame{DataFrame},Tuple{Array{Number,1}},Int64})
        Base.precompile(Tuple{typeof(vcat),DataFrame,DataFrame,DataFrame,Vararg{DataFrame,N} where N})
    end
    return nothing
end